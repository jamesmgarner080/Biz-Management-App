    router.post('/login', async (req, res) => {
        try {
            const { username, password } = req.body;
            
            if (!username || !password) {
                return res.status(400).json({ error: 'Username and password required' });
            }
            
            const user = db.getUserByUsername(username);
            
            if (!user) {
                return res.status(401).json({ error: 'Invalid credentials' });
            }
            
            if (!user.active) {
                return res.status(403).json({ error: 'Account is inactive' });
            }
            
            const validPassword = await bcrypt.compare(password, user.password_hash);
            
            if (!validPassword) {
                return res.status(401).json({ error: 'Invalid credentials' });
            }
            
            // Update last login
            db.updateLastLogin(user.id);
            
            // Generate token
            const token = generateToken(user);
            
            // Log action
--
    router.post('/', authenticateToken, requireManagement, async (req, res) => {
        try {
            const { username, password, role, full_name, email, phone } = req.body;
            
            // Validation
            if (!username || !password || !role || !full_name) {
                return res.status(400).json({ error: 'Missing required fields' });
            }
            
            const validRoles = ['admin', 'manager', 'supervisor', 'bar_staff', 'cleaner', 'employee'];
            if (!validRoles.includes(role)) {
                return res.status(400).json({ error: 'Invalid role' });
            }
            
            // Check if username already exists
            const existingUser = db.getUserByUsername(username);
            if (existingUser) {
                return res.status(409).json({ error: 'Username already exists' });
            }
            
            // Hash password
            const password_hash = await bcrypt.hash(password, 10);
            
            // Create user
            const result = db.createUser({
                username,
                password_hash,
                role,
                full_name,
                email,
                phone
--
    router.post('/change-password', authenticateToken, async (req, res) => {
        try {
            const { currentPassword, newPassword } = req.body;
            
            if (!currentPassword || !newPassword) {
                return res.status(400).json({ error: 'Current and new password required' });
            }
            
            if (newPassword.length < 6) {
                return res.status(400).json({ error: 'Password must be at least 6 characters' });
            }
            
            // Get user
            const user = db.getUserByUsername(req.user.username);
            
            // Verify current password
            const validPassword = await bcrypt.compare(currentPassword, user.password_hash);
            if (!validPassword) {
                return res.status(401).json({ error: 'Current password is incorrect' });
            }
            
            // Hash new password
            const newPasswordHash = await bcrypt.hash(newPassword, 10);
            
            // Update password
            db.updateUserPassword(req.user.id, newPasswordHash);
            
            // Log action
            db.logAction(req.user.id, 'change_password', 'user', req.user.id, 
                'Password changed', req.ip);
            
