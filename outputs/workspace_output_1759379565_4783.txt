            // Create user
            const result = db.createUser({
                username,
                password_hash,
                role,
                full_name,
                email,
                phone
            });
            
            // Log action
            db.logAction(req.user.id, 'create_user', 'user', result.lastInsertRowid, 
                `Created user: ${username}`, req.ip);
            
            res.status(201).json({
                message: 'User created successfully',
                userId: result.lastInsertRowid
            });
        } catch (error) {
            console.error('Create user error:', error);
            res.status(500).json({ error: 'Failed to create user' });
        }
    });
    
    // Update user (management only)
    router.put('/:id', authenticateToken, requireManagement, (req, res) => {
        try {
            const { id } = req.params;
            const { full_name, email, phone, role } = req.body;
            
            if (!full_name || !role) {
                return res.status(400).json({ error: 'Missing required fields' });
            }
            
            db.updateUser(id, { full_name, email, phone, role });
            
            // Log action
            db.logAction(req.user.id, 'update_user', 'user', id, 
                `Updated user: ${full_name}`, req.ip);
            
            res.json({ message: 'User updated successfully' });
        } catch (error) {
            console.error('Update user error:', error);
            res.status(500).json({ error: 'Failed to update user' });
        }
    });
    
    // Change password
    router.post('/change-password', authenticateToken, async (req, res) => {
        try {
            const { currentPassword, newPassword } = req.body;
            
            if (!currentPassword || !newPassword) {
                return res.status(400).json({ error: 'Current and new password required' });
            }
            
            if (newPassword.length < 6) {
                return res.status(400).json({ error: 'Password must be at least 6 characters' });
            }
            
            // Get user
            const user = db.getUserByUsername(req.user.username);
            
            // Verify current password
            const validPassword = await bcrypt.compare(currentPassword, user.password_hash);
            if (!validPassword) {
                return res.status(401).json({ error: 'Current password is incorrect' });
            }
            
            // Hash new password
