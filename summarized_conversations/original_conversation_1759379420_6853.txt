{'role': 'assistant', 'content': 'Now let me create the detailed database schema:\n\n<function_calls>\n<create-file file_path="database/schema.sql">\n-- Business Management Application Database Schema\n-- SQLite compatible schema\n\n-- Users table: Stores all system users (management and employees)\nCREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL,\n    role TEXT NOT NULL CHECK(role IN (\'management\', \'employee\')),\n    full_name TEXT NOT NULL,\n    email TEXT UNIQUE,\n    phone TEXT,\n    active INTEGER DEFAULT 1,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    last_login DATETIME\n);\n\n-- Tasks table: Stores all tasks (individual and shift-based)\nCREATE TABLE IF NOT EXISTS tasks (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title TEXT NOT NULL,\n    description TEXT,\n    category TEXT NOT NULL CHECK(category IN (\n        \'Daily Bar Duties\',\n        \'Staff Training\',\n        \'Management Duties\',\n        \'Maintenance\',\n        \'Cleaning\',\n        \'Inventory\',\n        \'Customer Service\',\n        \'Other\'\n    )),\n    priority TEXT NOT NULL CHECK(priority IN (\'High\', \'Medium\', \'Low\')),\n    \n    -- Assignment type: \'individual\' or \'shift-based\'\n    assignment_type TEXT NOT NULL CHECK(assignment_type IN (\'individual\', \'shift-based\')),\n    \n    -- For individual assignments: specific user ID\n    assigned_to INTEGER,\n    \n    -- For shift-based assignments: the date when any on-duty staff must complete\n    assigned_date DATE,\n    \n    due_date DATETIME,\n    due_time TIME,\n    \n    -- Status: \'pending\', \'in-progress\', \'completed\', \'overdue\'\n    status TEXT DEFAULT \'pending\' CHECK(status IN (\'pending\', \'in-progress\', \'completed\', \'overdue\')),\n    \n    -- Recurrence: \'none\', \'daily\', \'weekly\', \'monthly\'\n    recurrence TEXT DEFAULT \'none\' CHECK(recurrence IN (\'none\', \'daily\', \'weekly\', \'monthly\')),\n    \n    created_by INTEGER NOT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    \n    completed_at DATETIME,\n    completed_by INTEGER,\n    completion_notes TEXT,\n    completion_photo TEXT, -- Path to uploaded photo\n    \n    FOREIGN KEY (assigned_to) REFERENCES users(id),\n    FOREIGN KEY (created_by) REFERENCES users(id),\n    FOREIGN KEY (completed_by) REFERENCES users(id)\n);\n\n-- Task templates: Reusable task templates for quick creation\nCREATE TABLE IF NOT EXISTS task_templates (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    description TEXT,\n    category TEXT NOT NULL,\n    priority TEXT NOT NULL,\n    estimated_duration INTEGER, -- in minutes\n    recurrence_pattern TEXT DEFAULT \'none\',\n    created_by INTEGER NOT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (created_by) REFERENCES users(id)\n);\n\n-- Notifications: System notifications for users\nCREATE TABLE IF NOT EXISTS notifications (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    task_id INTEGER,\n    message TEXT NOT NULL,\n    type TEXT NOT NULL CHECK(type IN (\n        \'task_assigned\',\n        \'task_completed\',\n        \'task_overdue\',\n        \'shift_duty\',\n        \'system\'\n    )),\n    read INTEGER DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (task_id) REFERENCES tasks(id)\n);\n\n-- Shift schedules: Track who is working when (for shift-based task assignment)\nCREATE TABLE IF NOT EXISTS shift_schedules (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    shift_date DATE NOT NULL,\n    shift_start TIME NOT NULL,\n    shift_end TIME NOT NULL,\n    role TEXT, -- \'bartender\', \'server\', \'manager\', etc.\n    notes TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\n-- Task comments: Allow users to add comments/updates to tasks\nCREATE TABLE IF NOT EXISTS task_comments (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    task_id INTEGER NOT NULL,\n    user_id INTEGER NOT NULL,\n    comment TEXT NOT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (task_id) REFERENCES tasks(id),\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\n-- Audit log: Track important system actions\nCREATE TABLE IF NOT EXISTS audit_log (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER,\n    action TEXT NOT NULL,\n    entity_type TEXT, -- \'task\', \'user\', \'schedule\', etc.\n    entity_id INTEGER,\n    details TEXT,\n    ip_address TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_tasks_assigned_to ON tasks(assigned_to);\nCREATE INDEX IF NOT EXISTS idx_tasks_assigned_date ON tasks(assigned_date);\nCREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);\nCREATE INDEX IF NOT EXISTS idx_tasks_due_date ON tasks(due_date);\nCREATE INDEX IF NOT EXISTS idx_notifications_user ON notifications(user_id, read);\nCREATE INDEX IF NOT EXISTS idx_shift_schedules_date ON shift_schedules(shift_date);\nCREATE INDEX IF NOT EXISTS idx_shift_schedules_user ON shift_schedules(user_id);\n\n-- Insert default admin user (password: admin123 - CHANGE IN PRODUCTION!)\n-- Password hash for \'admin123\' using bcrypt\nINSERT OR IGNORE INTO users (id, username, password_hash, role, full_name, email) \nVALUES (1, \'admin\', \'$2b$10$rKvVLZ5TjqKqKqKqKqKqKuXxXxXxXxXxXxXxXxXxXxXxXxXxXx\', \'management\', \'System Administrator\', \'admin@example.com\');\n\n-- Sample task categories for reference\n-- Daily Bar Duties: Opening/closing procedures, restocking, cleaning\n-- Staff Training: Training sessions, certifications, onboarding\n-- Management Duties: Reports, scheduling, inventory management\n-- Maintenance: Equipment repairs, facility maintenance\n-- Cleaning: Deep cleaning, sanitation tasks\n-- Inventory: Stock counts, ordering, receiving\n-- Customer Service: Special events, customer follow-ups\n</create-file>\n</function_calls>'}