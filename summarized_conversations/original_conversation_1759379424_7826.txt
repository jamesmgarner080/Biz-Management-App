{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/routes/users.js">\nconst express = require(\'express\');\nconst bcrypt = require(\'bcrypt\');\nconst { authenticateToken, requireManagement, generateToken } = require(\'../auth\');\n\nfunction createUserRoutes(db) {\n    const router = express.Router();\n    \n    // Login endpoint\n    router.post(\'/login\', async (req, res) => {\n        try {\n            const { username, password } = req.body;\n            \n            if (!username || !password) {\n                return res.status(400).json({ error: \'Username and password required\' });\n            }\n            \n            const user = db.getUserByUsername(username);\n            \n            if (!user) {\n                return res.status(401).json({ error: \'Invalid credentials\' });\n            }\n            \n            if (!user.active) {\n                return res.status(403).json({ error: \'Account is inactive\' });\n            }\n            \n            const validPassword = await bcrypt.compare(password, user.password_hash);\n            \n            if (!validPassword) {\n                return res.status(401).json({ error: \'Invalid credentials\' });\n            }\n            \n            // Update last login\n            db.updateLastLogin(user.id);\n            \n            // Generate token\n            const token = generateToken(user);\n            \n            // Log action\n            db.logAction(user.id, \'login\', \'user\', user.id, \'User logged in\', req.ip);\n            \n            res.json({\n                token,\n                user: {\n                    id: user.id,\n                    username: user.username,\n                    role: user.role,\n                    full_name: user.full_name,\n                    email: user.email\n                }\n            });\n        } catch (error) {\n            console.error(\'Login error:\', error);\n            res.status(500).json({ error: \'Login failed\' });\n        }\n    });\n    \n    // Get current user info\n    router.get(\'/me\', authenticateToken, (req, res) => {\n        try {\n            const user = db.getUserById(req.user.id);\n            if (!user) {\n                return res.status(404).json({ error: \'User not found\' });\n            }\n            res.json(user);\n        } catch (error) {\n            console.error(\'Get user error:\', error);\n            res.status(500).json({ error: \'Failed to get user info\' });\n        }\n    });\n    \n    // Get all users (management only)\n    router.get(\'/\', authenticateToken, requireManagement, (req, res) => {\n        try {\n            const users = db.getAllUsers();\n            res.json(users);\n        } catch (error) {\n            console.error(\'Get users error:\', error);\n            res.status(500).json({ error: \'Failed to get users\' });\n        }\n    });\n    \n    // Get active users (for assignment dropdowns)\n    router.get(\'/active\', authenticateToken, (req, res) => {\n        try {\n            const users = db.getActiveUsers();\n            res.json(users);\n        } catch (error) {\n            console.error(\'Get active users error:\', error);\n            res.status(500).json({ error: \'Failed to get active users\' });\n        }\n    });\n    \n    // Create new user (management only)\n    router.post(\'/\', authenticateToken, requireManagement, async (req, res) => {\n        try {\n            const { username, password, role, full_name, email, phone } = req.body;\n            \n            // Validation\n            if (!username || !password || !role || !full_name) {\n                return res.status(400).json({ error: \'Missing required fields\' });\n            }\n            \n            if (![\'management\', \'employee\'].includes(role)) {\n                return res.status(400).json({ error: \'Invalid role\' });\n            }\n            \n            // Check if username already exists\n            const existingUser = db.getUserByUsername(username);\n            if (existingUser) {\n                return res.status(409).json({ error: \'Username already exists\' });\n            }\n            \n            // Hash password\n            const password_hash = await bcrypt.hash(password, 10);\n            \n            // Create user\n            const result = db.createUser({\n                username,\n                password_hash,\n                role,\n                full_name,\n                email,\n                phone\n            });\n            \n            // Log action\n            db.logAction(req.user.id, \'create_user\', \'user\', result.lastInsertRowid, \n                `Created user: ${username}`, req.ip);\n            \n            res.status(201).json({\n                message: \'User created successfully\',\n                userId: result.lastInsertRowid\n            });\n        } catch (error) {\n            console.error(\'Create user error:\', error);\n            res.status(500).json({ error: \'Failed to create user\' });\n        }\n    });\n    \n    // Update user (management only)\n    router.put(\'/:id\', authenticateToken, requireManagement, (req, res) => {\n        try {\n            const { id } = req.params;\n            const { full_name, email, phone, role } = req.body;\n            \n            if (!full_name || !role) {\n                return res.status(400).json({ error: \'Missing required fields\' });\n            }\n            \n            db.updateUser(id, { full_name, email, phone, role });\n            \n            // Log action\n            db.logAction(req.user.id, \'update_user\', \'user\', id, \n                `Updated user: ${full_name}`, req.ip);\n            \n            res.json({ message: \'User updated successfully\' });\n        } catch (error) {\n            console.error(\'Update user error:\', error);\n            res.status(500).json({ error: \'Failed to update user\' });\n        }\n    });\n    \n    // Change password\n    router.post(\'/change-password\', authenticateToken, async (req, res) => {\n        try {\n            const { currentPassword, newPassword } = req.body;\n            \n            if (!currentPassword || !newPassword) {\n                return res.status(400).json({ error: \'Current and new password required\' });\n            }\n            \n            if (newPassword.length < 6) {\n                return res.status(400).json({ error: \'Password must be at least 6 characters\' });\n            }\n            \n            // Get user\n            const user = db.getUserByUsername(req.user.username);\n            \n            // Verify current password\n            const validPassword = await bcrypt.compare(currentPassword, user.password_hash);\n            if (!validPassword) {\n                return res.status(401).json({ error: \'Current password is incorrect\' });\n            }\n            \n            // Hash new password\n            const newPasswordHash = await bcrypt.hash(newPassword, 10);\n            \n            // Update password\n            db.updateUserPassword(req.user.id, newPasswordHash);\n            \n            // Log action\n            db.logAction(req.user.id, \'change_password\', \'user\', req.user.id, \n                \'Password changed\', req.ip);\n            \n            res.json({ message: \'Password changed successfully\' });\n        } catch (error) {\n            console.error(\'Change password error:\', error);\n            res.status(500).json({ error: \'Failed to change password\' });\n        }\n    });\n    \n    return router;\n}\n\nmodule.exports = createUserRoutes;\n</create-file>\n</function_calls>'}