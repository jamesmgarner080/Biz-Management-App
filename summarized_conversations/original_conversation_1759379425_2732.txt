{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/routes/tasks.js">\nconst express = require(\'express\');\nconst { authenticateToken, requireManagement } = require(\'../auth\');\n\nfunction createTaskRoutes(db, io) {\n    const router = express.Router();\n    \n    // Get all tasks\n    router.get(\'/\', authenticateToken, (req, res) => {\n        try {\n            let tasks;\n            \n            if (req.user.role === \'management\') {\n                // Management sees all tasks\n                tasks = db.getAllTasks();\n            } else {\n                // Employees see only their assigned tasks and shift-based tasks\n                tasks = db.getTasksByUser(req.user.id);\n            }\n            \n            res.json(tasks);\n        } catch (error) {\n            console.error(\'Get tasks error:\', error);\n            res.status(500).json({ error: \'Failed to get tasks\' });\n        }\n    });\n    \n    // Get task by ID\n    router.get(\'/:id\', authenticateToken, (req, res) => {\n        try {\n            const task = db.getTaskById(req.params.id);\n            \n            if (!task) {\n                return res.status(404).json({ error: \'Task not found\' });\n            }\n            \n            // Check permissions\n            if (req.user.role !== \'management\' && \n                task.assigned_to !== req.user.id && \n                task.assignment_type !== \'shift-based\') {\n                return res.status(403).json({ error: \'Access denied\' });\n            }\n            \n            res.json(task);\n        } catch (error) {\n            console.error(\'Get task error:\', error);\n            res.status(500).json({ error: \'Failed to get task\' });\n        }\n    });\n    \n    // Get tasks by date\n    router.get(\'/date/:date\', authenticateToken, (req, res) => {\n        try {\n            const tasks = db.getTasksByDate(req.params.date);\n            res.json(tasks);\n        } catch (error) {\n            console.error(\'Get tasks by date error:\', error);\n            res.status(500).json({ error: \'Failed to get tasks\' });\n        }\n    });\n    \n    // Get shift tasks for a specific date\n    router.get(\'/shift/:date\', authenticateToken, (req, res) => {\n        try {\n            const tasks = db.getShiftTasksForDate(req.params.date);\n            res.json(tasks);\n        } catch (error) {\n            console.error(\'Get shift tasks error:\', error);\n            res.status(500).json({ error: \'Failed to get shift tasks\' });\n        }\n    });\n    \n    // Create new task (management only)\n    router.post(\'/\', authenticateToken, requireManagement, (req, res) => {\n        try {\n            const {\n                title,\n                description,\n                category,\n                priority,\n                assignment_type,\n                assigned_to,\n                assigned_date,\n                due_date,\n                due_time,\n                recurrence\n            } = req.body;\n            \n            // Validation\n            if (!title || !category || !priority || !assignment_type) {\n                return res.status(400).json({ error: \'Missing required fields\' });\n            }\n            \n            if (assignment_type === \'individual\' && !assigned_to) {\n                return res.status(400).json({ error: \'Individual tasks must have an assigned user\' });\n            }\n            \n            if (assignment_type === \'shift-based\' && !assigned_date) {\n                return res.status(400).json({ error: \'Shift-based tasks must have an assigned date\' });\n            }\n            \n            // Create task\n            const result = db.createTask({\n                title,\n                description,\n                category,\n                priority,\n                assignment_type,\n                assigned_to: assignment_type === \'individual\' ? assigned_to : null,\n                assigned_date: assignment_type === \'shift-based\' ? assigned_date : null,\n                due_date,\n                due_time,\n                recurrence,\n                created_by: req.user.id\n            });\n            \n            const taskId = result.lastInsertRowid;\n            \n            // Create notifications\n            if (assignment_type === \'individual\') {\n                // Notify specific user\n                db.createNotification(\n                    assigned_to,\n                    taskId,\n                    `New task assigned: ${title}`,\n                    \'task_assigned\'\n                );\n                \n                // Emit socket event\n                io.to(`user_${assigned_to}`).emit(\'new_task\', {\n                    taskId,\n                    title,\n                    priority\n                });\n            } else {\n                // Notify all users on shift for that date\n                const usersOnShift = db.getUsersOnShift(assigned_date);\n                usersOnShift.forEach(user => {\n                    db.createNotification(\n                        user.id,\n                        taskId,\n                        `New shift duty for ${assigned_date}: ${title}`,\n                        \'shift_duty\'\n                    );\n                    \n                    io.to(`user_${user.id}`).emit(\'new_shift_duty\', {\n                        taskId,\n                        title,\n                        date: assigned_date,\n                        priority\n                    });\n                });\n            }\n            \n            // Log action\n            db.logAction(req.user.id, \'create_task\', \'task\', taskId, \n                `Created task: ${title}`, req.ip);\n            \n            res.status(201).json({\n                message: \'Task created successfully\',\n                taskId\n            });\n        } catch (error) {\n            console.error(\'Create task error:\', error);\n            res.status(500).json({ error: \'Failed to create task\' });\n        }\n    });\n    \n    // Update task (management only)\n    router.put(\'/:id\', authenticateToken, requireManagement, (req, res) => {\n        try {\n            const { id } = req.params;\n            const {\n                title,\n                description,\n                category,\n                priority,\n                assignment_type,\n                assigned_to,\n                assigned_date,\n                due_date,\n                due_time,\n                recurrence\n            } = req.body;\n            \n            // Validation\n            if (!title || !category || !priority || !assignment_type) {\n                return res.status(400).json({ error: \'Missing required fields\' });\n            }\n            \n            // Update task\n            db.updateTask(id, {\n                title,\n                description,\n                category,\n                priority,\n                assignment_type,\n                assigned_to: assignment_type === \'individual\' ? assigned_to : null,\n                assigned_date: assignment_type === \'shift-based\' ? assigned_date : null,\n                due_date,\n                due_time,\n                recurrence\n            });\n            \n            // Log action\n            db.logAction(req.user.id, \'update_task\', \'task\', id, \n                `Updated task: ${title}`, req.ip);\n            \n            // Emit socket event\n            io.emit(\'task_updated\', { taskId: id });\n            \n            res.json({ message: \'Task updated successfully\' });\n        } catch (error) {\n            console.error(\'Update task error:\', error);\n            res.status(500).json({ error: \'Failed to update task\' });\n        }\n    });\n    \n    // Complete task\n    router.post(\'/:id/complete\', authenticateToken, (req, res) => {\n        try {\n            const { id } = req.params;\n            const { notes, photo } = req.body;\n            \n            const task = db.getTaskById(id);\n            \n            if (!task) {\n                return res.status(404).json({ error: \'Task not found\' });\n            }\n            \n            // Check if user can complete this task\n            if (task.assignment_type === \'individual\' && task.assigned_to !== req.user.id) {\n                if (req.user.role !== \'management\') {\n                    return res.status(403).json({ error: \'You cannot complete this task\' });\n                }\n            }\n            \n            // Complete task\n            db.completeTask(id, req.user.id, notes, photo);\n            \n            // Create notification for task creator\n            db.createNotification(\n                task.created_by,\n                id,\n                `Task completed by ${req.user.full_name}: ${task.title}`,\n                \'task_completed\'\n            );\n            \n            // Emit socket event\n            io.to(`user_${task.created_by}`).emit(\'task_completed\', {\n                taskId: id,\n                completedBy: req.user.full_name,\n                title: task.title\n            });\n            \n            // Log action\n            db.logAction(req.user.id, \'complete_task\', \'task\', id, \n                `Completed task: ${task.title}`, req.ip);\n            \n            res.json({ message: \'Task completed successfully\' });\n        } catch (error) {\n            console.error(\'Complete task error:\', error);\n            res.status(500).json({ error: \'Failed to complete task\' });\n        }\n    });\n    \n    // Update task status\n    router.patch(\'/:id/status\', authenticateToken, (req, res) => {\n        try {\n            const { id } = req.params;\n            const { status } = req.body;\n            \n            if (![\'pending\', \'in-progress\', \'completed\', \'overdue\'].includes(status)) {\n                return res.status(400).json({ error: \'Invalid status\' });\n            }\n            \n            db.updateTaskStatus(id, status);\n            \n            // Emit socket event\n            io.emit(\'task_status_updated\', { taskId: id, status });\n            \n            res.json({ message: \'Task status updated successfully\' });\n        } catch (error) {\n            console.error(\'Update task status error:\', error);\n            res.status(500).json({ error: \'Failed to update task status\' });\n        }\n    });\n    \n    // Delete task (management only)\n    router.delete(\'/:id\', authenticateToken, requireManagement, (req, res) => {\n        try {\n            const { id } = req.params;\n            const task = db.getTaskById(id);\n            \n            if (!task) {\n                return res.status(404).json({ error: \'Task not found\' });\n            }\n            \n            db.deleteTask(id);\n            \n            // Log action\n            db.logAction(req.user.id, \'delete_task\', \'task\', id, \n                `Deleted task: ${task.title}`, req.ip);\n            \n            // Emit socket event\n            io.emit(\'task_deleted\', { taskId: id });\n            \n            res.json({ message: \'Task deleted successfully\' });\n        } catch (error) {\n            console.error(\'Delete task error:\', error);\n            res.status(500).json({ error: \'Failed to delete task\' });\n        }\n    });\n    \n    // Get task statistics (management only)\n    router.get(\'/stats/overview\', authenticateToken, requireManagement, (req, res) => {\n        try {\n            const stats = db.getTaskStatistics();\n            res.json(stats);\n        } catch (error) {\n            console.error(\'Get task statistics error:\', error);\n            res.status(500).json({ error: \'Failed to get statistics\' });\n        }\n    });\n    \n    return router;\n}\n\nmodule.exports = createTaskRoutes;\n</create-file>\n</function_calls>'}