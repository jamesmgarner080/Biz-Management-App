{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/utils/pdf-generator.js">\nconst PDFDocument = require(\'pdfkit\');\nconst fs = require(\'fs\');\nconst path = require(\'path\');\n\nclass PDFGenerator {\n    constructor(db) {\n        this.db = db;\n    }\n    \n    generateTaskReport(tasks, filters, outputPath) {\n        return new Promise((resolve, reject) => {\n            try {\n                const doc = new PDFDocument({ margin: 50 });\n                const stream = fs.createWriteStream(outputPath);\n                \n                doc.pipe(stream);\n                \n                // Header\n                doc.fontSize(20).text(\'Task Report\', { align: \'center\' });\n                doc.moveDown();\n                \n                // Report metadata\n                doc.fontSize(10);\n                doc.text(`Generated: ${new Date().toLocaleString()}`, { align: \'right\' });\n                doc.text(`Total Tasks: ${tasks.length}`, { align: \'right\' });\n                doc.moveDown();\n                \n                // Filters applied\n                if (filters && Object.keys(filters).length > 0) {\n                    doc.fontSize(12).text(\'Filters Applied:\', { underline: true });\n                    doc.fontSize(10);\n                    if (filters.status) doc.text(`Status: ${filters.status}`);\n                    if (filters.category) doc.text(`Category: ${filters.category}`);\n                    if (filters.priority) doc.text(`Priority: ${filters.priority}`);\n                    if (filters.dateFrom) doc.text(`Date From: ${filters.dateFrom}`);\n                    if (filters.dateTo) doc.text(`Date To: ${filters.dateTo}`);\n                    doc.moveDown();\n                }\n                \n                // Tasks\n                doc.fontSize(14).text(\'Tasks\', { underline: true });\n                doc.moveDown();\n                \n                tasks.forEach((task, index) => {\n                    // Check if we need a new page\n                    if (doc.y > 700) {\n                        doc.addPage();\n                    }\n                    \n                    doc.fontSize(12).text(`${index + 1}. ${task.title}`, { bold: true });\n                    doc.fontSize(10);\n                    \n                    if (task.description) {\n                        doc.text(`Description: ${task.description}`);\n                    }\n                    \n                    doc.text(`Category: ${task.category}`);\n                    doc.text(`Priority: ${task.priority}`);\n                    doc.text(`Status: ${task.status}`);\n                    \n                    if (task.assignment_type === \'individual\' && task.assigned_to_name) {\n                        doc.text(`Assigned To: ${task.assigned_to_name}`);\n                    } else if (task.assignment_type === \'shift-based\' && task.assigned_date) {\n                        doc.text(`Shift Date: ${task.assigned_date}`);\n                    }\n                    \n                    if (task.due_date) {\n                        doc.text(`Due Date: ${task.due_date}${task.due_time ? \' \' + task.due_time : \'\'}`);\n                    }\n                    \n                    if (task.status === \'completed\') {\n                        doc.text(`Completed By: ${task.completed_by_name || \'Unknown\'}`);\n                        doc.text(`Completed At: ${task.completed_at}`);\n                        if (task.completion_notes) {\n                            doc.text(`Notes: ${task.completion_notes}`);\n                        }\n                    }\n                    \n                    doc.moveDown();\n                    doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke();\n                    doc.moveDown();\n                });\n                \n                // Footer\n                const pages = doc.bufferedPageRange();\n                for (let i = 0; i < pages.count; i++) {\n                    doc.switchToPage(i);\n                    doc.fontSize(8).text(\n                        `Page ${i + 1} of ${pages.count}`,\n                        50,\n                        doc.page.height - 50,\n                        { align: \'center\' }\n                    );\n                }\n                \n                doc.end();\n                \n                stream.on(\'finish\', () => {\n                    resolve(outputPath);\n                });\n                \n                stream.on(\'error\', (error) => {\n                    reject(error);\n                });\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    \n    generateUserReport(user, tasks, schedules, outputPath) {\n        return new Promise((resolve, reject) => {\n            try {\n                const doc = new PDFDocument({ margin: 50 });\n                const stream = fs.createWriteStream(outputPath);\n                \n                doc.pipe(stream);\n                \n                // Header\n                doc.fontSize(20).text(\'User Performance Report\', { align: \'center\' });\n                doc.moveDown();\n                \n                // User info\n                doc.fontSize(14).text(\'User Information\', { underline: true });\n                doc.fontSize(10);\n                doc.text(`Name: ${user.full_name}`);\n                doc.text(`Username: ${user.username}`);\n                doc.text(`Role: ${user.role}`);\n                doc.text(`Email: ${user.email || \'N/A\'}`);\n                doc.moveDown();\n                \n                // Task statistics\n                doc.fontSize(14).text(\'Task Statistics\', { underline: true });\n                doc.fontSize(10);\n                \n                const completedTasks = tasks.filter(t => t.status === \'completed\').length;\n                const pendingTasks = tasks.filter(t => t.status === \'pending\').length;\n                const overdueTasks = tasks.filter(t => t.status === \'overdue\').length;\n                \n                doc.text(`Total Tasks: ${tasks.length}`);\n                doc.text(`Completed: ${completedTasks}`);\n                doc.text(`Pending: ${pendingTasks}`);\n                doc.text(`Overdue: ${overdueTasks}`);\n                doc.text(`Completion Rate: ${tasks.length > 0 ? ((completedTasks / tasks.length) * 100).toFixed(1) : 0}%`);\n                doc.moveDown();\n                \n                // Recent tasks\n                doc.fontSize(14).text(\'Recent Tasks\', { underline: true });\n                doc.moveDown();\n                \n                tasks.slice(0, 10).forEach((task, index) => {\n                    if (doc.y > 700) {\n                        doc.addPage();\n                    }\n                    \n                    doc.fontSize(11).text(`${index + 1}. ${task.title}`);\n                    doc.fontSize(9);\n                    doc.text(`Status: ${task.status} | Priority: ${task.priority} | Category: ${task.category}`);\n                    if (task.status === \'completed\' && task.completed_at) {\n                        doc.text(`Completed: ${task.completed_at}`);\n                    }\n                    doc.moveDown(0.5);\n                });\n                \n                doc.end();\n                \n                stream.on(\'finish\', () => {\n                    resolve(outputPath);\n                });\n                \n                stream.on(\'error\', (error) => {\n                    reject(error);\n                });\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nmodule.exports = PDFGenerator;\n</create-file>\n</function_calls>'}