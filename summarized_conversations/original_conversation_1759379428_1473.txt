{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/server.js">\nrequire(\'dotenv\').config();\nconst express = require(\'express\');\nconst http = require(\'http\');\nconst socketIo = require(\'socket.io\');\nconst cors = require(\'cors\');\nconst path = require(\'path\');\nconst fs = require(\'fs\');\nconst multer = require(\'multer\');\nconst jwt = require(\'jsonwebtoken\');\n\n// Import modules\nconst DatabaseManager = require(\'./database\');\nconst { authenticateToken } = require(\'./auth\');\nconst createUserRoutes = require(\'./routes/users\');\nconst createTaskRoutes = require(\'./routes/tasks\');\nconst createNotificationRoutes = require(\'./routes/notifications\');\nconst createScheduleRoutes = require(\'./routes/schedules\');\nconst createTemplateRoutes = require(\'./routes/templates\');\nconst PDFGenerator = require(\'./utils/pdf-generator\');\n\n// Initialize Express app\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n    cors: {\n        origin: process.env.CORS_ORIGIN || \'*\',\n        methods: [\'GET\', \'POST\']\n    }\n});\n\n// Initialize database\nconst db = new DatabaseManager();\nconst pdfGenerator = new PDFGenerator(db);\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Create uploads directory if it doesn\'t exist\nconst uploadDir = process.env.UPLOAD_DIR || \'./uploads\';\nif (!fs.existsSync(uploadDir)) {\n    fs.mkdirSync(uploadDir, { recursive: true });\n}\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({\n    destination: (req, file, cb) => {\n        cb(null, uploadDir);\n    },\n    filename: (req, file, cb) => {\n        const uniqueSuffix = Date.now() + \'-\' + Math.round(Math.random() * 1E9);\n        cb(null, file.fieldname + \'-\' + uniqueSuffix + path.extname(file.originalname));\n    }\n});\n\nconst upload = multer({\n    storage: storage,\n    limits: {\n        fileSize: parseInt(process.env.MAX_FILE_SIZE) || 5242880 // 5MB default\n    },\n    fileFilter: (req, file, cb) => {\n        const allowedTypes = /jpeg|jpg|png|gif|pdf/;\n        const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n        const mimetype = allowedTypes.test(file.mimetype);\n        \n        if (mimetype && extname) {\n            return cb(null, true);\n        } else {\n            cb(new Error(\'Only images and PDFs are allowed\'));\n        }\n    }\n});\n\n// Serve static files\napp.use(\'/uploads\', express.static(uploadDir));\napp.use(express.static(path.join(__dirname, \'../frontend\')));\n\n// API Routes\napp.use(\'/api/users\', createUserRoutes(db));\napp.use(\'/api/tasks\', createTaskRoutes(db, io));\napp.use(\'/api/notifications\', createNotificationRoutes(db, io));\napp.use(\'/api/schedules\', createScheduleRoutes(db, io));\napp.use(\'/api/templates\', createTemplateRoutes(db));\n\n// File upload endpoint\napp.post(\'/api/upload\', authenticateToken, upload.single(\'file\'), (req, res) => {\n    try {\n        if (!req.file) {\n            return res.status(400).json({ error: \'No file uploaded\' });\n        }\n        \n        res.json({\n            message: \'File uploaded successfully\',\n            filename: req.file.filename,\n            path: `/uploads/${req.file.filename}`\n        });\n    } catch (error) {\n        console.error(\'Upload error:\', error);\n        res.status(500).json({ error: \'Failed to upload file\' });\n    }\n});\n\n// PDF Report generation endpoint\napp.post(\'/api/reports/tasks\', authenticateToken, async (req, res) => {\n    try {\n        const { taskIds, filters } = req.body;\n        \n        let tasks;\n        if (taskIds && taskIds.length > 0) {\n            tasks = taskIds.map(id => db.getTaskById(id)).filter(t => t);\n        } else {\n            tasks = db.getAllTasks();\n        }\n        \n        // Apply filters\n        if (filters) {\n            if (filters.status) {\n                tasks = tasks.filter(t => t.status === filters.status);\n            }\n            if (filters.category) {\n                tasks = tasks.filter(t => t.category === filters.category);\n            }\n            if (filters.priority) {\n                tasks = tasks.filter(t => t.priority === filters.priority);\n            }\n            if (filters.dateFrom) {\n                tasks = tasks.filter(t => t.due_date >= filters.dateFrom);\n            }\n            if (filters.dateTo) {\n                tasks = tasks.filter(t => t.due_date <= filters.dateTo);\n            }\n        }\n        \n        const filename = `task-report-${Date.now()}.pdf`;\n        const outputPath = path.join(uploadDir, filename);\n        \n        await pdfGenerator.generateTaskReport(tasks, filters, outputPath);\n        \n        res.json({\n            message: \'Report generated successfully\',\n            filename: filename,\n            path: `/uploads/${filename}`\n        });\n    } catch (error) {\n        console.error(\'Report generation error:\', error);\n        res.status(500).json({ error: \'Failed to generate report\' });\n    }\n});\n\n// User report endpoint\napp.get(\'/api/reports/user/:userId\', authenticateToken, async (req, res) => {\n    try {\n        const { userId } = req.params;\n        \n        // Check permissions\n        if (req.user.role !== \'management\' && parseInt(userId) !== req.user.id) {\n            return res.status(403).json({ error: \'Access denied\' });\n        }\n        \n        const user = db.getUserById(userId);\n        if (!user) {\n            return res.status(404).json({ error: \'User not found\' });\n        }\n        \n        const tasks = db.getTasksByUser(userId);\n        const schedules = db.getShiftSchedulesByUser(userId, \n            new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0],\n            new Date().toISOString().split(\'T\')[0]\n        );\n        \n        const filename = `user-report-${userId}-${Date.now()}.pdf`;\n        const outputPath = path.join(uploadDir, filename);\n        \n        await pdfGenerator.generateUserReport(user, tasks, schedules, outputPath);\n        \n        res.json({\n            message: \'Report generated successfully\',\n            filename: filename,\n            path: `/uploads/${filename}`\n        });\n    } catch (error) {\n        console.error(\'User report generation error:\', error);\n        res.status(500).json({ error: \'Failed to generate report\' });\n    }\n});\n\n// Health check endpoint\napp.get(\'/api/health\', (req, res) => {\n    res.json({ status: \'ok\', timestamp: new Date().toISOString() });\n});\n\n// Socket.io authentication middleware\nio.use((socket, next) => {\n    const token = socket.handshake.auth.token;\n    \n    if (!token) {\n        return next(new Error(\'Authentication error\'));\n    }\n    \n    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\n        if (err) {\n            return next(new Error(\'Authentication error\'));\n        }\n        socket.userId = decoded.id;\n        socket.userRole = decoded.role;\n        next();\n    });\n});\n\n// Socket.io connection handling\nio.on(\'connection\', (socket) => {\n    console.log(`User connected: ${socket.userId}`);\n    \n    // Join user-specific room\n    socket.join(`user_${socket.userId}`);\n    \n    // Handle disconnection\n    socket.on(\'disconnect\', () => {\n        console.log(`User disconnected: ${socket.userId}`);\n    });\n    \n    // Handle task status updates\n    socket.on(\'update_task_status\', (data) => {\n        io.emit(\'task_status_changed\', data);\n    });\n});\n\n// Serve frontend\napp.get(\'*\', (req, res) => {\n    res.sendFile(path.join(__dirname, \'../frontend/index.html\'));\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n    console.error(\'Error:\', err);\n    res.status(500).json({ error: err.message || \'Internal server error\' });\n});\n\n// Start server\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n    console.log(`Environment: ${process.env.NODE_ENV || \'development\'}`);\n    console.log(`Database: ${process.env.DATABASE_PATH || \'./database/business_management.db\'}`);\n});\n\n// Graceful shutdown\nprocess.on(\'SIGTERM\', () => {\n    console.log(\'SIGTERM received, closing server...\');\n    server.close(() => {\n        db.close();\n        console.log(\'Server closed\');\n        process.exit(0);\n    });\n});\n\nprocess.on(\'SIGINT\', () => {\n    console.log(\'SIGINT received, closing server...\');\n    server.close(() => {\n        db.close();\n        console.log(\'Server closed\');\n        process.exit(0);\n    });\n});\n</create-file>\n</function_calls>'}