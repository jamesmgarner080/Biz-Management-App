{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="frontend/js/auth.js">\n// Authentication handling\nconst API_URL = window.location.origin + \'/api\';\n\n// Toast notification system\nfunction showToast(message, type = \'info\') {\n    const toastContainer = document.getElementById(\'toastContainer\');\n    if (!toastContainer) return;\n    \n    const toast = document.createElement(\'div\');\n    toast.className = `toast toast-${type}`;\n    \n    const icons = {\n        success: \'fa-check-circle\',\n        error: \'fa-exclamation-circle\',\n        warning: \'fa-exclamation-triangle\',\n        info: \'fa-info-circle\'\n    };\n    \n    toast.innerHTML = `\n        <i class="fas ${icons[type]} toast-icon"></i>\n        <div class="toast-content">\n            <div class="toast-message">${message}</div>\n        </div>\n    `;\n    \n    toastContainer.appendChild(toast);\n    \n    setTimeout(() => {\n        toast.style.animation = \'slideOut 0.3s ease-out\';\n        setTimeout(() => toast.remove(), 300);\n    }, 3000);\n}\n\n// Check if user is authenticated\nfunction isAuthenticated() {\n    return localStorage.getItem(\'token\') !== null;\n}\n\n// Get current user\nfunction getCurrentUser() {\n    const userStr = localStorage.getItem(\'user\');\n    return userStr ? JSON.parse(userStr) : null;\n}\n\n// Get auth token\nfunction getAuthToken() {\n    return localStorage.getItem(\'token\');\n}\n\n// Logout\nfunction logout() {\n    localStorage.removeItem(\'token\');\n    localStorage.removeItem(\'user\');\n    window.location.href = \'/login.html\';\n}\n\n// Login form handling\nif (document.getElementById(\'loginForm\')) {\n    const loginForm = document.getElementById(\'loginForm\');\n    const errorMessage = document.getElementById(\'errorMessage\');\n    \n    loginForm.addEventListener(\'submit\', async (e) => {\n        e.preventDefault();\n        \n        const username = document.getElementById(\'username\').value;\n        const password = document.getElementById(\'password\').value;\n        \n        // Clear previous error\n        errorMessage.classList.add(\'hidden\');\n        errorMessage.textContent = \'\';\n        \n        // Disable submit button\n        const submitBtn = loginForm.querySelector(\'button[type="submit"]\');\n        submitBtn.disabled = true;\n        submitBtn.innerHTML = \'<i class="fas fa-spinner fa-spin"></i> Signing in...\';\n        \n        try {\n            const response = await fetch(`${API_URL}/users/login`, {\n                method: \'POST\',\n                headers: {\n                    \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({ username, password })\n            });\n            \n            const data = await response.json();\n            \n            if (response.ok) {\n                // Store token and user info\n                localStorage.setItem(\'token\', data.token);\n                localStorage.setItem(\'user\', JSON.stringify(data.user));\n                \n                // Redirect to main app\n                window.location.href = \'/\';\n            } else {\n                errorMessage.textContent = data.error || \'Login failed\';\n                errorMessage.classList.remove(\'hidden\');\n            }\n        } catch (error) {\n            console.error(\'Login error:\', error);\n            errorMessage.textContent = \'Connection error. Please try again.\';\n            errorMessage.classList.remove(\'hidden\');\n        } finally {\n            submitBtn.disabled = false;\n            submitBtn.innerHTML = \'<i class="fas fa-sign-in-alt"></i> Sign In\';\n        }\n    });\n}\n\n// Redirect to login if not authenticated (for protected pages)\nif (window.location.pathname !== \'/login.html\' && !isAuthenticated()) {\n    window.location.href = \'/login.html\';\n}\n\n// Redirect to main app if already authenticated (on login page)\nif (window.location.pathname === \'/login.html\' && isAuthenticated()) {\n    window.location.href = \'/\';\n}\n\n// API request helper with authentication\nasync function apiRequest(endpoint, options = {}) {\n    const token = getAuthToken();\n    \n    const defaultOptions = {\n        headers: {\n            \'Content-Type\': \'application/json\',\n            \'Authorization\': `Bearer ${token}`\n        }\n    };\n    \n    const mergedOptions = {\n        ...defaultOptions,\n        ...options,\n        headers: {\n            ...defaultOptions.headers,\n            ...options.headers\n        }\n    };\n    \n    try {\n        const response = await fetch(`${API_URL}${endpoint}`, mergedOptions);\n        \n        // Handle unauthorized\n        if (response.status === 401 || response.status === 403) {\n            logout();\n            return null;\n        }\n        \n        const data = await response.json();\n        \n        if (!response.ok) {\n            throw new Error(data.error || \'Request failed\');\n        }\n        \n        return data;\n    } catch (error) {\n        console.error(\'API request error:\', error);\n        throw error;\n    }\n}\n</create-file>\n</function_calls>'}