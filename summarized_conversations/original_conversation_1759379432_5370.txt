{'role': 'assistant', 'content': 'Now let me create the main application JavaScript file:\n\n<function_calls>\n<create-file file_path="frontend/js/app.js">\n// Main application logic\nlet socket;\nlet currentUser;\nlet currentView = \'dashboard\';\n\n// Initialize app\ndocument.addEventListener(\'DOMContentLoaded\', async () => {\n    // Get current user\n    currentUser = getCurrentUser();\n    \n    if (!currentUser) {\n        logout();\n        return;\n    }\n    \n    // Update UI with user info\n    document.getElementById(\'userName\').textContent = currentUser.full_name;\n    document.getElementById(\'userRole\').textContent = currentUser.role;\n    \n    // Hide management-only navigation items for employees\n    if (currentUser.role !== \'management\') {\n        document.getElementById(\'allTasksNav\').style.display = \'none\';\n        document.getElementById(\'reportsNav\').style.display = \'none\';\n        document.getElementById(\'usersNav\').style.display = \'none\';\n    }\n    \n    // Initialize Socket.io\n    initializeSocket();\n    \n    // Load initial data\n    await loadDashboard();\n    \n    // Setup event listeners\n    setupEventListeners();\n    \n    // Load notifications\n    loadNotifications();\n});\n\n// Initialize Socket.io connection\nfunction initializeSocket() {\n    socket = io({\n        auth: {\n            token: getAuthToken()\n        }\n    });\n    \n    socket.on(\'connect\', () => {\n        console.log(\'Socket connected\');\n    });\n    \n    socket.on(\'disconnect\', () => {\n        console.log(\'Socket disconnected\');\n    });\n    \n    socket.on(\'new_task\', (data) => {\n        showToast(`New task assigned: ${data.title}`, \'info\');\n        if (currentView === \'dashboard\' || currentView === \'tasks\') {\n            loadCurrentView();\n        }\n        loadNotifications();\n    });\n    \n    socket.on(\'new_shift_duty\', (data) => {\n        showToast(`New shift duty for ${data.date}: ${data.title}`, \'info\');\n        if (currentView === \'dashboard\' || currentView === \'tasks\') {\n            loadCurrentView();\n        }\n        loadNotifications();\n    });\n    \n    socket.on(\'task_completed\', (data) => {\n        showToast(`Task completed by ${data.completedBy}: ${data.title}`, \'success\');\n        if (currentView === \'dashboard\' || currentView === \'all-tasks\') {\n            loadCurrentView();\n        }\n    });\n    \n    socket.on(\'task_updated\', (data) => {\n        if (currentView === \'dashboard\' || currentView === \'tasks\' || currentView === \'all-tasks\') {\n            loadCurrentView();\n        }\n    });\n    \n    socket.on(\'task_deleted\', (data) => {\n        if (currentView === \'dashboard\' || currentView === \'tasks\' || currentView === \'all-tasks\') {\n            loadCurrentView();\n        }\n    });\n}\n\n// Setup event listeners\nfunction setupEventListeners() {\n    // Navigation\n    document.querySelectorAll(\'.nav-link\').forEach(link => {\n        link.addEventListener(\'click\', (e) => {\n            e.preventDefault();\n            const view = link.dataset.view;\n            if (view) {\n                switchView(view);\n            }\n        });\n    });\n    \n    // Logout\n    document.getElementById(\'logoutBtn\').addEventListener(\'click\', (e) => {\n        e.preventDefault();\n        logout();\n    });\n    \n    // Create task buttons\n    document.getElementById(\'createTaskBtn\').addEventListener(\'click\', () => openTaskModal());\n    if (document.getElementById(\'createTaskBtn2\')) {\n        document.getElementById(\'createTaskBtn2\').addEventListener(\'click\', () => openTaskModal());\n    }\n    \n    // Task modal\n    document.getElementById(\'closeTaskModal\').addEventListener(\'click\', closeTaskModal);\n    document.getElementById(\'cancelTaskBtn\').addEventListener(\'click\', closeTaskModal);\n    document.getElementById(\'saveTaskBtn\').addEventListener(\'click\', saveTask);\n    \n    // Task assignment type change\n    document.getElementById(\'taskAssignmentType\').addEventListener(\'change\', (e) => {\n        const type = e.target.value;\n        const assignedToGroup = document.getElementById(\'assignedToGroup\');\n        const assignedDateGroup = document.getElementById(\'assignedDateGroup\');\n        \n        if (type === \'individual\') {\n            assignedToGroup.style.display = \'block\';\n            assignedDateGroup.style.display = \'none\';\n            document.getElementById(\'taskAssignedTo\').required = true;\n            document.getElementById(\'taskAssignedDate\').required = false;\n        } else if (type === \'shift-based\') {\n            assignedToGroup.style.display = \'none\';\n            assignedDateGroup.style.display = \'block\';\n            document.getElementById(\'taskAssignedTo\').required = false;\n            document.getElementById(\'taskAssignedDate\').required = true;\n        } else {\n            assignedToGroup.style.display = \'none\';\n            assignedDateGroup.style.display = \'none\';\n            document.getElementById(\'taskAssignedTo\').required = false;\n            document.getElementById(\'taskAssignedDate\').required = false;\n        }\n    });\n    \n    // Task details modal\n    document.getElementById(\'closeTaskDetailsModal\').addEventListener(\'click\', closeTaskDetailsModal);\n    document.getElementById(\'closeDetailsBtn\').addEventListener(\'click\', closeTaskDetailsModal);\n    \n    // Complete task modal\n    document.getElementById(\'closeCompleteModal\').addEventListener(\'click\', closeCompleteTaskModal);\n    document.getElementById(\'cancelCompleteBtn\').addEventListener(\'click\', closeCompleteTaskModal);\n    document.getElementById(\'submitCompleteBtn\').addEventListener(\'click\', submitCompleteTask);\n    \n    // Filter tasks\n    if (document.getElementById(\'filterTasksBtn\')) {\n        document.getElementById(\'filterTasksBtn\').addEventListener(\'click\', () => {\n            const filters = document.getElementById(\'taskFilters\');\n            filters.style.display = filters.style.display === \'none\' ? \'block\' : \'none\';\n        });\n    }\n    \n    if (document.getElementById(\'applyFiltersBtn\')) {\n        document.getElementById(\'applyFiltersBtn\').addEventListener(\'click\', () => {\n            loadMyTasks();\n        });\n    }\n    \n    // Export tasks\n    if (document.getElementById(\'exportTasksBtn\')) {\n        document.getElementById(\'exportTasksBtn\').addEventListener(\'click\', exportTasks);\n    }\n    \n    // Mark all notifications read\n    if (document.getElementById(\'markAllReadBtn\')) {\n        document.getElementById(\'markAllReadBtn\').addEventListener(\'click\', markAllNotificationsRead);\n    }\n    \n    // Change password form\n    document.getElementById(\'changePasswordForm\').addEventListener(\'submit\', changePassword);\n}\n\n// Switch view\nfunction switchView(view) {\n    currentView = view;\n    \n    // Hide all views\n    document.querySelectorAll(\'.view-content\').forEach(v => v.classList.add(\'hidden\'));\n    \n    // Remove active class from all nav links\n    document.querySelectorAll(\'.nav-link\').forEach(link => link.classList.remove(\'active\'));\n    \n    // Show selected view\n    const viewElement = document.getElementById(`${view}View`);\n    if (viewElement) {\n        viewElement.classList.remove(\'hidden\');\n    }\n    \n    // Add active class to current nav link\n    const activeLink = document.querySelector(`.nav-link[data-view="${view}"]`);\n    if (activeLink) {\n        activeLink.classList.add(\'active\');\n    }\n    \n    // Load view data\n    loadCurrentView();\n}\n\n// Load current view data\nasync function loadCurrentView() {\n    switch (currentView) {\n        case \'dashboard\':\n            await loadDashboard();\n            break;\n        case \'tasks\':\n            await loadMyTasks();\n            break;\n        case \'all-tasks\':\n            await loadAllTasks();\n            break;\n        case \'notifications\':\n            await loadNotifications();\n            break;\n        case \'users\':\n            await loadUsers();\n            break;\n    }\n}\n\n// Load dashboard\nasync function loadDashboard() {\n    try {\n        // Load statistics\n        const tasks = await apiRequest(\'/tasks\');\n        \n        const total = tasks.length;\n        const completed = tasks.filter(t => t.status === \'completed\').length;\n        const pending = tasks.filter(t => t.status === \'pending\').length;\n        const overdue = tasks.filter(t => t.status === \'overdue\').length;\n        \n        document.getElementById(\'totalTasks\').textContent = total;\n        document.getElementById(\'completedTasks\').textContent = completed;\n        document.getElementById(\'pendingTasks\').textContent = pending;\n        document.getElementById(\'overdueTasks\').textContent = overdue;\n        \n        // Update task badge\n        const activeTasks = pending + overdue;\n        const taskBadge = document.getElementById(\'taskBadge\');\n        if (activeTasks > 0) {\n            taskBadge.textContent = activeTasks;\n            taskBadge.classList.remove(\'hidden\');\n        } else {\n            taskBadge.classList.add(\'hidden\');\n        }\n        \n        // Load recent tasks\n        const recentTasks = tasks.slice(0, 5);\n        renderTaskList(recentTasks, \'recentTasksList\');\n    } catch (error) {\n        console.error(\'Error loading dashboard:\', error);\n        showToast(\'Failed to load dashboard\', \'error\');\n    }\n}\n\n// Load my tasks\nasync function loadMyTasks() {\n    try {\n        const tasks = await apiRequest(\'/tasks\');\n        \n        // Apply filters\n        const statusFilter = document.getElementById(\'filterStatus\')?.value;\n        const priorityFilter = document.getElementById(\'filterPriority\')?.value;\n        const categoryFilter = document.getElementById(\'filterCategory\')?.value;\n        \n        let filteredTasks = tasks;\n        \n        if (statusFilter) {\n            filteredTasks = filteredTasks.filter(t => t.status === statusFilter);\n        }\n        if (priorityFilter) {\n            filteredTasks = filteredTasks.filter(t => t.priority === priorityFilter);\n        }\n        if (categoryFilter) {\n            filteredTasks = filteredTasks.filter(t => t.category === categoryFilter);\n        }\n        \n        renderTaskList(filteredTasks, \'myTasksList\');\n    } catch (error) {\n        console.error(\'Error loading tasks:\', error);\n        showToast(\'Failed to load tasks\', \'error\');\n    }\n}\n\n// Load all tasks (management only)\nasync function loadAllTasks() {\n    try {\n        const tasks = await apiRequest(\'/tasks\');\n        renderTaskList(tasks, \'allTasksList\', true);\n    } catch (error) {\n        console.error(\'Error loading all tasks:\', error);\n        showToast(\'Failed to load tasks\', \'error\');\n    }\n}\n\n// Render task list\nfunction renderTaskList(tasks, containerId, showActions = false) {\n    const container = document.getElementById(containerId);\n    \n    if (!tasks || tasks.length === 0) {\n        container.innerHTML = `\n            <div class="empty-state">\n                <div class="empty-state-icon">\n                    <i class="fas fa-tasks"></i>\n                </div>\n                <h3 class="empty-state-title">No tasks found</h3>\n                <p class="empty-state-message">There are no tasks to display.</p>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = tasks.map(task => `\n        <div class="task-item" data-task-id="${task.id}">\n            <div class="task-content">\n                <div class="task-header">\n                    <div>\n                        <h3 class="task-title">${escapeHtml(task.title)}</h3>\n                        <div class="task-meta">\n                            <span class="task-meta-item">\n                                <i class="fas fa-tag"></i>\n                                ${escapeHtml(task.category)}\n                            </span>\n                            <span class="badge priority-${task.priority.toLowerCase()}">\n                                ${task.priority}\n                            </span>\n                            <span class="badge status-${task.status}">\n                                ${task.status}\n                            </span>\n                            ${task.assignment_type === \'shift-based\' ? \n                                `<span class="task-meta-item">\n                                    <i class="fas fa-calendar"></i>\n                                    Shift: ${task.assigned_date}\n                                </span>` : \n                                task.assigned_to_name ? \n                                `<span class="task-meta-item">\n                                    <i class="fas fa-user"></i>\n                                    ${escapeHtml(task.assigned_to_name)}\n                                </span>` : \'\'\n                            }\n                            ${task.due_date ? \n                                `<span class="task-meta-item">\n                                    <i class="fas fa-clock"></i>\n                                    Due: ${task.due_date}${task.due_time ? \' \' + task.due_time : \'\'}\n                                </span>` : \'\'\n                            }\n                        </div>\n                    </div>\n                    <div class="task-actions">\n                        ${task.status !== \'completed\' && (currentUser.role === \'management\' || task.assigned_to === currentUser.id || task.assignment_type === \'shift-based\') ? \n                            `<button class="btn btn-success btn-sm complete-task-btn" data-task-id="${task.id}">\n                                <i class="fas fa-check"></i>\n                                Complete\n                            </button>` : \'\'\n                        }\n                        ${showActions && currentUser.role === \'management\' ? \n                            `<button class="btn btn-secondary btn-sm edit-task-btn" data-task-id="${task.id}">\n                                <i class="fas fa-edit"></i>\n                            </button>\n                            <button class="btn btn-danger btn-sm delete-task-btn" data-task-id="${task.id}">\n                                <i class="fas fa-trash"></i>\n                            </button>` : \'\'\n                        }\n                    </div>\n                </div>\n                ${task.description ? \n                    `<p class="task-description">${escapeHtml(task.description)}</p>` : \'\'\n                }\n            </div>\n        </div>\n    `).join(\'\');\n    \n    // Add event listeners\n    container.querySelectorAll(\'.task-item\').forEach(item => {\n        item.addEventListener(\'click\', (e) => {\n            if (!e.target.closest(\'button\')) {\n                const taskId = item.dataset.taskId;\n                showTaskDetails(taskId);\n            }\n        });\n    });\n    \n    container.querySelectorAll(\'.complete-task-btn\').forEach(btn => {\n        btn.addEventListener(\'click\', (e) => {\n            e.stopPropagation();\n            const taskId = btn.dataset.taskId;\n            openCompleteTaskModal(taskId);\n        });\n    });\n    \n    if (showActions) {\n        container.querySelectorAll(\'.edit-task-btn\').forEach(btn => {\n            btn.addEventListener(\'click\', (e) => {\n                e.stopPropagation();\n                const taskId = btn.dataset.taskId;\n                editTask(taskId);\n            });\n        });\n        \n        container.querySelectorAll(\'.delete-task-btn\').forEach(btn => {\n            btn.addEventListener(\'click\', (e) => {\n                e.stopPropagation();\n                const taskId = btn.dataset.taskId;\n                deleteTask(taskId);\n            });\n        });\n    }\n}\n\n// Show task details\nasync function showTaskDetails(taskId) {\n    try {\n        const task = await apiRequest(`/tasks/${taskId}`);\n        \n        const content = document.getElementById(\'taskDetailsContent\');\n        content.innerHTML = `\n            <div class="form-group">\n                <label class="form-label">Title</label>\n                <p>${escapeHtml(task.title)}</p>\n            </div>\n            \n            ${task.description ? `\n                <div class="form-group">\n                    <label class="form-label">Description</label>\n                    <p>${escapeHtml(task.description)}</p>\n                </div>\n            ` : \'\'}\n            \n            <div class="form-row">\n                <div class="form-group">\n                    <label class="form-label">Category</label>\n                    <p>${escapeHtml(task.category)}</p>\n                </div>\n                \n                <div class="form-group">\n                    <label class="form-label">Priority</label>\n                    <p><span class="badge priority-${task.priority.toLowerCase()}">${task.priority}</span></p>\n                </div>\n            </div>\n            \n            <div class="form-row">\n                <div class="form-group">\n                    <label class="form-label">Status</label>\n                    <p><span class="badge status-${task.status}">${task.status}</span></p>\n                </div>\n                \n                <div class="form-group">\n                    <label class="form-label">Assignment Type</label>\n                    <p>${task.assignment_type === \'individual\' ? \'Individual\' : \'Shift-based\'}</p>\n                </div>\n            </div>\n            \n            ${task.assignment_type === \'individual\' && task.assigned_to_name ? `\n                <div class="form-group">\n                    <label class="form-label">Assigned To</label>\n                    <p>${escapeHtml(task.assigned_to_name)}</p>\n                </div>\n            ` : \'\'}\n            \n            ${task.assignment_type === \'shift-based\' && task.assigned_date ? `\n                <div class="form-group">\n                    <label class="form-label">Shift Date</label>\n                    <p>${task.assigned_date}</p>\n                </div>\n            ` : \'\'}\n            \n            ${task.due_date ? `\n                <div class="form-group">\n                    <label class="form-label">Due Date</label>\n                    <p>${task.due_date}${task.due_time ? \' \' + task.due_time : \'\'}</p>\n                </div>\n            ` : \'\'}\n            \n            ${task.status === \'completed\' ? `\n                <div class="form-group">\n                    <label class="form-label">Completed By</label>\n                    <p>${escapeHtml(task.completed_by_name || \'Unknown\')}</p>\n                </div>\n                \n                <div class="form-group">\n                    <label class="form-label">Completed At</label>\n                    <p>${task.completed_at}</p>\n                </div>\n                \n                ${task.completion_notes ? `\n                    <div class="form-group">\n                        <label class="form-label">Completion Notes</label>\n                        <p>${escapeHtml(task.completion_notes)}</p>\n                    </div>\n                ` : \'\'}\n                \n                ${task.completion_photo ? `\n                    <div class="form-group">\n                        <label class="form-label">Completion Photo</label>\n                        <img src="${task.completion_photo}" alt="Completion photo" style="max-width: 100%; border-radius: 8px;">\n                    </div>\n                ` : \'\'}\n            ` : \'\'}\n            \n            <div class="form-group">\n                <label class="form-label">Created By</label>\n                <p>${escapeHtml(task.created_by_name || \'Unknown\')}</p>\n            </div>\n        `;\n        \n        // Show complete button if task is not completed and user can complete it\n        const completeBtn = document.getElementById(\'completeTaskBtn\');\n        if (task.status !== \'completed\' && \n            (currentUser.role === \'management\' || \n             task.assigned_to === currentUser.id || \n             task.assignment_type === \'shift-based\')) {\n            completeBtn.style.display = \'inline-flex\';\n            completeBtn.onclick = () => {\n                closeTaskDetailsModal();\n                openCompleteTaskModal(taskId);\n            };\n        } else {\n            completeBtn.style.display = \'none\';\n        }\n        \n        document.getElementById(\'taskDetailsModal\').classList.remove(\'hidden\');\n    } catch (error) {\n        console.error(\'Error loading task details:\', error);\n        showToast(\'Failed to load task details\', \'error\');\n    }\n}\n\n// Close task details modal\nfunction closeTaskDetailsModal() {\n    document.getElementById(\'taskDetailsModal\').classList.add(\'hidden\');\n}\n\n// Load notifications\nasync function loadNotifications() {\n    try {\n        const notifications = await apiRequest(\'/notifications\');\n        \n        // Update notification badge\n        const unreadCount = notifications.filter(n => !n.read).length;\n        const notificationBadge = document.getElementById(\'notificationBadge\');\n        if (unreadCount > 0) {\n            notificationBadge.textContent = unreadCount;\n            notificationBadge.classList.remove(\'hidden\');\n        } else {\n            notificationBadge.classList.add(\'hidden\');\n        }\n        \n        // Render notifications if on notifications view\n        if (currentView === \'notifications\') {\n            renderNotifications(notifications);\n        }\n    } catch (error) {\n        console.error(\'Error loading notifications:\', error);\n    }\n}\n\n// Render notifications\nfunction renderNotifications(notifications) {\n    const container = document.getElementById(\'notificationsList\');\n    \n    if (!notifications || notifications.length === 0) {\n        container.innerHTML = `\n            <div class="empty-state">\n                <div class="empty-state-icon">\n                    <i class="fas fa-bell"></i>\n                </div>\n                <h3 class="empty-state-title">No notifications</h3>\n                <p class="empty-state-message">You\'re all caught up!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = notifications.map(notification => `\n        <div class="task-item ${notification.read ? \'text-muted\' : \'\'}" style="cursor: default;">\n            <div class="task-content">\n                <div class="task-header">\n                    <div>\n                        <p style="margin: 0;">${escapeHtml(notification.message)}</p>\n                        <div class="task-meta">\n                            <span class="task-meta-item">\n                                <i class="fas fa-clock"></i>\n                                ${new Date(notification.created_at).toLocaleString()}\n                            </span>\n                            ${!notification.read ? \'<span class="badge badge-primary">New</span>\' : \'\'}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `).join(\'\');\n}\n\n// Mark all notifications as read\nasync function markAllNotificationsRead() {\n    try {\n        await apiRequest(\'/notifications/read-all\', { method: \'POST\' });\n        showToast(\'All notifications marked as read\', \'success\');\n        loadNotifications();\n    } catch (error) {\n        console.error(\'Error marking notifications as read:\', error);\n        showToast(\'Failed to mark notifications as read\', \'error\');\n    }\n}\n\n// Load users (management only)\nasync function loadUsers() {\n    try {\n        const users = await apiRequest(\'/users\');\n        renderUsers(users);\n    } catch (error) {\n        console.error(\'Error loading users:\', error);\n        showToast(\'Failed to load users\', \'error\');\n    }\n}\n\n// Render users\nfunction renderUsers(users) {\n    const container = document.getElementById(\'usersList\');\n    \n    if (!users || users.length === 0) {\n        container.innerHTML = `\n            <div class="empty-state">\n                <div class="empty-state-icon">\n                    <i class="fas fa-users"></i>\n                </div>\n                <h3 class="empty-state-title">No users found</h3>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = `\n        <div class="table-container">\n            <table class="table">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Username</th>\n                        <th>Email</th>\n                        <th>Role</th>\n                        <th>Status</th>\n                        <th>Created</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    ${users.map(user => `\n                        <tr>\n                            <td>${escapeHtml(user.full_name)}</td>\n                            <td>${escapeHtml(user.username)}</td>\n                            <td>${escapeHtml(user.email || \'N/A\')}</td>\n                            <td><span class="badge badge-${user.role === \'management\' ? \'primary\' : \'info\'}">${user.role}</span></td>\n                            <td><span class="badge badge-${user.active ? \'success\' : \'danger\'}">${user.active ? \'Active\' : \'Inactive\'}</span></td>\n                            <td>${new Date(user.created_at).toLocaleDateString()}</td>\n                        </tr>\n                    `).join(\'\')}\n                </tbody>\n            </table>\n        </div>\n    `;\n}\n\n// Change password\nasync function changePassword(e) {\n    e.preventDefault();\n    \n    const currentPassword = document.getElementById(\'currentPassword\').value;\n    const newPassword = document.getElementById(\'newPassword\').value;\n    const confirmPassword = document.getElementById(\'confirmPassword\').value;\n    \n    if (newPassword !== confirmPassword) {\n        showToast(\'New passwords do not match\', \'error\');\n        return;\n    }\n    \n    try {\n        await apiRequest(\'/users/change-password\', {\n            method: \'POST\',\n            body: JSON.stringify({ currentPassword, newPassword })\n        });\n        \n        showToast(\'Password changed successfully\', \'success\');\n        document.getElementById(\'changePasswordForm\').reset();\n    } catch (error) {\n        console.error(\'Error changing password:\', error);\n        showToast(error.message || \'Failed to change password\', \'error\');\n    }\n}\n\n// Export tasks to PDF\nasync function exportTasks() {\n    try {\n        showToast(\'Generating PDF report...\', \'info\');\n        \n        const response = await fetch(`${API_URL}/reports/tasks`, {\n            method: \'POST\',\n            headers: {\n                \'Content-Type\': \'application/json\',\n                \'Authorization\': `Bearer ${getAuthToken()}`\n            },\n            body: JSON.stringify({})\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            // Open PDF in new tab\n            window.open(data.path, \'_blank\');\n            showToast(\'Report generated successfully\', \'success\');\n        } else {\n            throw new Error(data.error);\n        }\n    } catch (error) {\n        console.error(\'Error exporting tasks:\', error);\n        showToast(\'Failed to generate report\', \'error\');\n    }\n}\n\n// Utility function to escape HTML\nfunction escapeHtml(text) {\n    if (!text) return \'\';\n    const div = document.createElement(\'div\');\n    div.textContent = text;\n    return div.innerHTML;\n}\n</create-file>\n</function_calls>'}