{'role': 'assistant', 'content': 'Now let me create the tasks.js file for task-specific functionality:\n\n<function_calls>\n<create-file file_path="frontend/js/tasks.js">\n// Task management functionality\n\n// Open task modal\nasync function openTaskModal(taskId = null) {\n    const modal = document.getElementById(\'taskModal\');\n    const modalTitle = document.getElementById(\'taskModalTitle\');\n    const form = document.getElementById(\'taskForm\');\n    \n    // Reset form\n    form.reset();\n    document.getElementById(\'taskId\').value = \'\';\n    document.getElementById(\'assignedToGroup\').style.display = \'none\';\n    document.getElementById(\'assignedDateGroup\').style.display = \'none\';\n    \n    // Load active users for assignment dropdown\n    try {\n        const users = await apiRequest(\'/users/active\');\n        const assignedToSelect = document.getElementById(\'taskAssignedTo\');\n        assignedToSelect.innerHTML = \'<option value="">Select user</option>\' +\n            users.map(user => `<option value="${user.id}">${escapeHtml(user.full_name)}</option>`).join(\'\');\n    } catch (error) {\n        console.error(\'Error loading users:\', error);\n    }\n    \n    if (taskId) {\n        // Edit mode\n        modalTitle.textContent = \'Edit Task\';\n        try {\n            const task = await apiRequest(`/tasks/${taskId}`);\n            \n            document.getElementById(\'taskId\').value = task.id;\n            document.getElementById(\'taskTitle\').value = task.title;\n            document.getElementById(\'taskDescription\').value = task.description || \'\';\n            document.getElementById(\'taskCategory\').value = task.category;\n            document.getElementById(\'taskPriority\').value = task.priority;\n            document.getElementById(\'taskAssignmentType\').value = task.assignment_type;\n            \n            if (task.assignment_type === \'individual\') {\n                document.getElementById(\'assignedToGroup\').style.display = \'block\';\n                document.getElementById(\'taskAssignedTo\').value = task.assigned_to;\n                document.getElementById(\'taskAssignedTo\').required = true;\n            } else if (task.assignment_type === \'shift-based\') {\n                document.getElementById(\'assignedDateGroup\').style.display = \'block\';\n                document.getElementById(\'taskAssignedDate\').value = task.assigned_date;\n                document.getElementById(\'taskAssignedDate\').required = true;\n            }\n            \n            document.getElementById(\'taskDueDate\').value = task.due_date || \'\';\n            document.getElementById(\'taskDueTime\').value = task.due_time || \'\';\n            document.getElementById(\'taskRecurrence\').value = task.recurrence || \'none\';\n        } catch (error) {\n            console.error(\'Error loading task:\', error);\n            showToast(\'Failed to load task\', \'error\');\n            return;\n        }\n    } else {\n        // Create mode\n        modalTitle.textContent = \'Create Task\';\n    }\n    \n    modal.classList.remove(\'hidden\');\n}\n\n// Close task modal\nfunction closeTaskModal() {\n    document.getElementById(\'taskModal\').classList.add(\'hidden\');\n}\n\n// Save task\nasync function saveTask() {\n    const form = document.getElementById(\'taskForm\');\n    \n    if (!form.checkValidity()) {\n        form.reportValidity();\n        return;\n    }\n    \n    const taskId = document.getElementById(\'taskId\').value;\n    const taskData = {\n        title: document.getElementById(\'taskTitle\').value,\n        description: document.getElementById(\'taskDescription\').value,\n        category: document.getElementById(\'taskCategory\').value,\n        priority: document.getElementById(\'taskPriority\').value,\n        assignment_type: document.getElementById(\'taskAssignmentType\').value,\n        assigned_to: document.getElementById(\'taskAssignedTo\').value || null,\n        assigned_date: document.getElementById(\'taskAssignedDate\').value || null,\n        due_date: document.getElementById(\'taskDueDate\').value || null,\n        due_time: document.getElementById(\'taskDueTime\').value || null,\n        recurrence: document.getElementById(\'taskRecurrence\').value || \'none\'\n    };\n    \n    try {\n        const saveBtn = document.getElementById(\'saveTaskBtn\');\n        saveBtn.disabled = true;\n        saveBtn.innerHTML = \'<i class="fas fa-spinner fa-spin"></i> Saving...\';\n        \n        if (taskId) {\n            // Update existing task\n            await apiRequest(`/tasks/${taskId}`, {\n                method: \'PUT\',\n                body: JSON.stringify(taskData)\n            });\n            showToast(\'Task updated successfully\', \'success\');\n        } else {\n            // Create new task\n            await apiRequest(\'/tasks\', {\n                method: \'POST\',\n                body: JSON.stringify(taskData)\n            });\n            showToast(\'Task created successfully\', \'success\');\n        }\n        \n        closeTaskModal();\n        loadCurrentView();\n    } catch (error) {\n        console.error(\'Error saving task:\', error);\n        showToast(error.message || \'Failed to save task\', \'error\');\n    } finally {\n        const saveBtn = document.getElementById(\'saveTaskBtn\');\n        saveBtn.disabled = false;\n        saveBtn.innerHTML = \'<i class="fas fa-save"></i> Save Task\';\n    }\n}\n\n// Edit task\nasync function editTask(taskId) {\n    await openTaskModal(taskId);\n}\n\n// Delete task\nasync function deleteTask(taskId) {\n    if (!confirm(\'Are you sure you want to delete this task?\')) {\n        return;\n    }\n    \n    try {\n        await apiRequest(`/tasks/${taskId}`, {\n            method: \'DELETE\'\n        });\n        showToast(\'Task deleted successfully\', \'success\');\n        loadCurrentView();\n    } catch (error) {\n        console.error(\'Error deleting task:\', error);\n        showToast(\'Failed to delete task\', \'error\');\n    }\n}\n\n// Open complete task modal\nfunction openCompleteTaskModal(taskId) {\n    document.getElementById(\'completeTaskId\').value = taskId;\n    document.getElementById(\'completionNotes\').value = \'\';\n    document.getElementById(\'completionPhoto\').value = \'\';\n    document.getElementById(\'completeTaskModal\').classList.remove(\'hidden\');\n}\n\n// Close complete task modal\nfunction closeCompleteTaskModal() {\n    document.getElementById(\'completeTaskModal\').classList.add(\'hidden\');\n}\n\n// Submit complete task\nasync function submitCompleteTask() {\n    const taskId = document.getElementById(\'completeTaskId\').value;\n    const notes = document.getElementById(\'completionNotes\').value;\n    const photoInput = document.getElementById(\'completionPhoto\');\n    \n    try {\n        const submitBtn = document.getElementById(\'submitCompleteBtn\');\n        submitBtn.disabled = true;\n        submitBtn.innerHTML = \'<i class="fas fa-spinner fa-spin"></i> Completing...\';\n        \n        let photoPath = null;\n        \n        // Upload photo if provided\n        if (photoInput.files.length > 0) {\n            const formData = new FormData();\n            formData.append(\'file\', photoInput.files[0]);\n            \n            const uploadResponse = await fetch(`${API_URL}/upload`, {\n                method: \'POST\',\n                headers: {\n                    \'Authorization\': `Bearer ${getAuthToken()}`\n                },\n                body: formData\n            });\n            \n            if (uploadResponse.ok) {\n                const uploadData = await uploadResponse.json();\n                photoPath = uploadData.path;\n            }\n        }\n        \n        // Complete task\n        await apiRequest(`/tasks/${taskId}/complete`, {\n            method: \'POST\',\n            body: JSON.stringify({\n                notes: notes,\n                photo: photoPath\n            })\n        });\n        \n        showToast(\'Task completed successfully\', \'success\');\n        closeCompleteTaskModal();\n        loadCurrentView();\n    } catch (error) {\n        console.error(\'Error completing task:\', error);\n        showToast(error.message || \'Failed to complete task\', \'error\');\n    } finally {\n        const submitBtn = document.getElementById(\'submitCompleteBtn\');\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = \'<i class="fas fa-check"></i> Complete Task\';\n    }\n}\n</create-file>\n</function_calls>'}