{'role': 'assistant', 'content': 'Now let me create a comprehensive API documentation file:\n\n<function_calls>\n<create-file file_path="API_DOCUMENTATION.md">\n# API Documentation\n\nComplete API reference for the Business Management Application.\n\n## Base URL\n\n```\nhttp://localhost:3000/api\n```\n\n## Authentication\n\nMost endpoints require authentication using JWT tokens. Include the token in the Authorization header:\n\n```\nAuthorization: Bearer <your-jwt-token>\n```\n\n### Getting a Token\n\n**Endpoint**: `POST /users/login`\n\n**Request Body**:\n```json\n{\n  "username": "admin",\n  "password": "admin123"\n}\n```\n\n**Response**:\n```json\n{\n  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",\n  "user": {\n    "id": 1,\n    "username": "admin",\n    "role": "management",\n    "full_name": "System Administrator",\n    "email": "admin@example.com"\n  }\n}\n```\n\n## User Endpoints\n\n### Login\n\n**POST** `/users/login`\n\nAuthenticate a user and receive a JWT token.\n\n**Request Body**:\n```json\n{\n  "username": "string",\n  "password": "string"\n}\n```\n\n**Response**: `200 OK`\n```json\n{\n  "token": "string",\n  "user": {\n    "id": "number",\n    "username": "string",\n    "role": "string",\n    "full_name": "string",\n    "email": "string"\n  }\n}\n```\n\n### Get Current User\n\n**GET** `/users/me`\n\nGet information about the currently authenticated user.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n{\n  "id": 1,\n  "username": "admin",\n  "role": "management",\n  "full_name": "System Administrator",\n  "email": "admin@example.com",\n  "phone": null,\n  "active": 1\n}\n```\n\n### Get All Users\n\n**GET** `/users`\n\nGet all users (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n[\n  {\n    "id": 1,\n    "username": "admin",\n    "role": "management",\n    "full_name": "System Administrator",\n    "email": "admin@example.com",\n    "phone": null,\n    "active": 1,\n    "created_at": "2024-01-01 00:00:00"\n  }\n]\n```\n\n### Get Active Users\n\n**GET** `/users/active`\n\nGet all active users (for assignment dropdowns).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n[\n  {\n    "id": 1,\n    "username": "admin",\n    "role": "management",\n    "full_name": "System Administrator",\n    "email": "admin@example.com"\n  }\n]\n```\n\n### Create User\n\n**POST** `/users`\n\nCreate a new user (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**:\n```json\n{\n  "username": "john_doe",\n  "password": "secure_password",\n  "role": "employee",\n  "full_name": "John Doe",\n  "email": "john@example.com",\n  "phone": "555-0123"\n}\n```\n\n**Response**: `201 Created`\n```json\n{\n  "message": "User created successfully",\n  "userId": 2\n}\n```\n\n### Update User\n\n**PUT** `/users/:id`\n\nUpdate user information (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**:\n```json\n{\n  "full_name": "John Doe Updated",\n  "email": "john.updated@example.com",\n  "phone": "555-0124",\n  "role": "employee"\n}\n```\n\n**Response**: `200 OK`\n```json\n{\n  "message": "User updated successfully"\n}\n```\n\n### Change Password\n\n**POST** `/users/change-password`\n\nChange the current user\'s password.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**:\n```json\n{\n  "currentPassword": "old_password",\n  "newPassword": "new_password"\n}\n```\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Password changed successfully"\n}\n```\n\n## Task Endpoints\n\n### Get All Tasks\n\n**GET** `/tasks`\n\nGet all tasks. Management sees all tasks, employees see only their assigned tasks.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n[\n  {\n    "id": 1,\n    "title": "Clean bar area",\n    "description": "Complete cleaning of bar area including counters and equipment",\n    "category": "Daily Bar Duties",\n    "priority": "High",\n    "assignment_type": "individual",\n    "assigned_to": 2,\n    "assigned_to_name": "John Doe",\n    "assigned_date": null,\n    "due_date": "2024-01-15",\n    "due_time": "18:00",\n    "status": "pending",\n    "recurrence": "none",\n    "created_by": 1,\n    "created_by_name": "System Administrator",\n    "created_at": "2024-01-01 10:00:00",\n    "completed_at": null,\n    "completed_by": null,\n    "completed_by_name": null,\n    "completion_notes": null,\n    "completion_photo": null\n  }\n]\n```\n\n### Get Task by ID\n\n**GET** `/tasks/:id`\n\nGet a specific task by ID.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n{\n  "id": 1,\n  "title": "Clean bar area",\n  "description": "Complete cleaning of bar area",\n  "category": "Daily Bar Duties",\n  "priority": "High",\n  "assignment_type": "individual",\n  "assigned_to": 2,\n  "assigned_to_name": "John Doe",\n  "due_date": "2024-01-15",\n  "due_time": "18:00",\n  "status": "pending",\n  "created_by_name": "System Administrator"\n}\n```\n\n### Get Tasks by Date\n\n**GET** `/tasks/date/:date`\n\nGet all tasks for a specific date.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Parameters**:\n- `date`: Date in YYYY-MM-DD format\n\n**Example**: `/tasks/date/2024-01-15`\n\n**Response**: `200 OK` (same format as Get All Tasks)\n\n### Get Shift Tasks\n\n**GET** `/tasks/shift/:date`\n\nGet all shift-based tasks for a specific date.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Parameters**:\n- `date`: Date in YYYY-MM-DD format\n\n**Example**: `/tasks/shift/2024-01-15`\n\n**Response**: `200 OK` (same format as Get All Tasks)\n\n### Create Task\n\n**POST** `/tasks`\n\nCreate a new task (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body (Individual Assignment)**:\n```json\n{\n  "title": "Clean bar area",\n  "description": "Complete cleaning of bar area including counters",\n  "category": "Daily Bar Duties",\n  "priority": "High",\n  "assignment_type": "individual",\n  "assigned_to": 2,\n  "due_date": "2024-01-15",\n  "due_time": "18:00",\n  "recurrence": "none"\n}\n```\n\n**Request Body (Shift-based Assignment)**:\n```json\n{\n  "title": "Opening checklist",\n  "description": "Complete all opening procedures",\n  "category": "Daily Bar Duties",\n  "priority": "High",\n  "assignment_type": "shift-based",\n  "assigned_date": "2024-01-15",\n  "due_date": "2024-01-15",\n  "due_time": "10:00",\n  "recurrence": "daily"\n}\n```\n\n**Response**: `201 Created`\n```json\n{\n  "message": "Task created successfully",\n  "taskId": 1\n}\n```\n\n### Update Task\n\n**PUT** `/tasks/:id`\n\nUpdate an existing task (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**: Same as Create Task\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Task updated successfully"\n}\n```\n\n### Complete Task\n\n**POST** `/tasks/:id/complete`\n\nMark a task as complete.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**:\n```json\n{\n  "notes": "Task completed successfully. All areas cleaned.",\n  "photo": "/uploads/photo-123456.jpg"\n}\n```\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Task completed successfully"\n}\n```\n\n### Update Task Status\n\n**PATCH** `/tasks/:id/status`\n\nUpdate task status.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**:\n```json\n{\n  "status": "in-progress"\n}\n```\n\n**Valid statuses**: `pending`, `in-progress`, `completed`, `overdue`\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Task status updated successfully"\n}\n```\n\n### Delete Task\n\n**DELETE** `/tasks/:id`\n\nDelete a task (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Task deleted successfully"\n}\n```\n\n### Get Task Statistics\n\n**GET** `/tasks/stats/overview`\n\nGet task statistics (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n{\n  "total": 50,\n  "completed": 30,\n  "pending": 15,\n  "overdue": 5,\n  "byCategory": [\n    {\n      "category": "Daily Bar Duties",\n      "count": 20\n    }\n  ],\n  "byPriority": [\n    {\n      "priority": "High",\n      "count": 15\n    }\n  ]\n}\n```\n\n## Notification Endpoints\n\n### Get Notifications\n\n**GET** `/notifications`\n\nGet user notifications.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Query Parameters**:\n- `unread`: `true` to get only unread notifications\n\n**Example**: `/notifications?unread=true`\n\n**Response**: `200 OK`\n```json\n[\n  {\n    "id": 1,\n    "user_id": 2,\n    "task_id": 1,\n    "task_title": "Clean bar area",\n    "message": "New task assigned: Clean bar area",\n    "type": "task_assigned",\n    "read": 0,\n    "created_at": "2024-01-01 10:00:00"\n  }\n]\n```\n\n### Mark Notification as Read\n\n**PATCH** `/notifications/:id/read`\n\nMark a specific notification as read.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Notification marked as read"\n}\n```\n\n### Mark All Notifications as Read\n\n**POST** `/notifications/read-all`\n\nMark all user notifications as read.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n{\n  "message": "All notifications marked as read"\n}\n```\n\n## Schedule Endpoints\n\n### Get Schedules by Date\n\n**GET** `/schedules/date/:date`\n\nGet all shift schedules for a specific date.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Parameters**:\n- `date`: Date in YYYY-MM-DD format\n\n**Response**: `200 OK`\n```json\n[\n  {\n    "id": 1,\n    "user_id": 2,\n    "full_name": "John Doe",\n    "username": "john_doe",\n    "shift_date": "2024-01-15",\n    "shift_start": "09:00",\n    "shift_end": "17:00",\n    "role": "bartender",\n    "notes": "Morning shift",\n    "created_at": "2024-01-01 10:00:00"\n  }\n]\n```\n\n### Get User Schedules\n\n**GET** `/schedules/user/:userId`\n\nGet schedules for a specific user.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Query Parameters**:\n- `startDate`: Start date (YYYY-MM-DD)\n- `endDate`: End date (YYYY-MM-DD)\n\n**Example**: `/schedules/user/2?startDate=2024-01-01&endDate=2024-01-31`\n\n**Response**: `200 OK` (same format as Get Schedules by Date)\n\n### Get Users on Duty\n\n**GET** `/schedules/on-duty/:date`\n\nGet all users scheduled for a specific date.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n[\n  {\n    "id": 2,\n    "username": "john_doe",\n    "full_name": "John Doe",\n    "role": "employee"\n  }\n]\n```\n\n### Create Shift Schedule\n\n**POST** `/schedules`\n\nCreate a new shift schedule (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**:\n```json\n{\n  "user_id": 2,\n  "shift_date": "2024-01-15",\n  "shift_start": "09:00",\n  "shift_end": "17:00",\n  "role": "bartender",\n  "notes": "Morning shift"\n}\n```\n\n**Response**: `201 Created`\n```json\n{\n  "message": "Shift schedule created successfully",\n  "scheduleId": 1\n}\n```\n\n## Template Endpoints\n\n### Get All Templates\n\n**GET** `/templates`\n\nGet all task templates.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n[\n  {\n    "id": 1,\n    "name": "Daily Opening Checklist",\n    "description": "Complete all opening procedures",\n    "category": "Daily Bar Duties",\n    "priority": "High",\n    "estimated_duration": 30,\n    "recurrence_pattern": "daily",\n    "created_by": 1,\n    "created_at": "2024-01-01 10:00:00"\n  }\n]\n```\n\n### Get Template by ID\n\n**GET** `/templates/:id`\n\nGet a specific template.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK` (same format as single template above)\n\n### Create Template\n\n**POST** `/templates`\n\nCreate a new task template (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**:\n```json\n{\n  "name": "Daily Opening Checklist",\n  "description": "Complete all opening procedures",\n  "category": "Daily Bar Duties",\n  "priority": "High",\n  "estimated_duration": 30,\n  "recurrence_pattern": "daily"\n}\n```\n\n**Response**: `201 Created`\n```json\n{\n  "message": "Task template created successfully",\n  "templateId": 1\n}\n```\n\n### Delete Template\n\n**DELETE** `/templates/:id`\n\nDelete a task template (Management only).\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Task template deleted successfully"\n}\n```\n\n## Report Endpoints\n\n### Generate Task Report\n\n**POST** `/reports/tasks`\n\nGenerate a PDF report of tasks.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Request Body**:\n```json\n{\n  "taskIds": [1, 2, 3],\n  "filters": {\n    "status": "completed",\n    "category": "Daily Bar Duties",\n    "priority": "High",\n    "dateFrom": "2024-01-01",\n    "dateTo": "2024-01-31"\n  }\n}\n```\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Report generated successfully",\n  "filename": "task-report-1234567890.pdf",\n  "path": "/uploads/task-report-1234567890.pdf"\n}\n```\n\n### Generate User Report\n\n**GET** `/reports/user/:userId`\n\nGenerate a PDF report for a specific user.\n\n**Headers**: `Authorization: Bearer <token>`\n\n**Response**: `200 OK`\n```json\n{\n  "message": "Report generated successfully",\n  "filename": "user-report-2-1234567890.pdf",\n  "path": "/uploads/user-report-2-1234567890.pdf"\n}\n```\n\n## File Upload Endpoint\n\n### Upload File\n\n**POST** `/upload`\n\nUpload a file (image or PDF).\n\n**Headers**: \n- `Authorization: Bearer <token>`\n- `Content-Type: multipart/form-data`\n\n**Form Data**:\n- `file`: The file to upload\n\n**Response**: `200 OK`\n```json\n{\n  "message": "File uploaded successfully",\n  "filename": "file-1234567890.jpg",\n  "path": "/uploads/file-1234567890.jpg"\n}\n```\n\n## Error Responses\n\nAll endpoints may return the following error responses:\n\n### 400 Bad Request\n```json\n{\n  "error": "Missing required fields"\n}\n```\n\n### 401 Unauthorized\n```json\n{\n  "error": "Access token required"\n}\n```\n\n### 403 Forbidden\n```json\n{\n  "error": "Management access required"\n}\n```\n\n### 404 Not Found\n```json\n{\n  "error": "Resource not found"\n}\n```\n\n### 500 Internal Server Error\n```json\n{\n  "error": "Internal server error"\n}\n```\n\n## WebSocket Events\n\nThe application uses Socket.io for real-time updates. Connect using:\n\n```javascript\nconst socket = io(\'http://localhost:3000\', {\n  auth: {\n    token: \'your-jwt-token\'\n  }\n});\n```\n\n### Events Emitted by Server\n\n- `new_task`: New task assigned\n- `new_shift_duty`: New shift duty assigned\n- `task_completed`: Task marked as complete\n- `task_updated`: Task updated\n- `task_deleted`: Task deleted\n- `task_status_changed`: Task status changed\n- `shift_scheduled`: New shift scheduled\n\n### Event Data Format\n\n```javascript\nsocket.on(\'new_task\', (data) => {\n  // data = { taskId, title, priority }\n});\n\nsocket.on(\'task_completed\', (data) => {\n  // data = { taskId, completedBy, title }\n});\n```\n\n## Rate Limiting\n\nCurrently, there are no rate limits implemented. For production use, consider implementing rate limiting using packages like `express-rate-limit`.\n\n## CORS\n\nCORS is enabled for all origins in development. For production, configure the `CORS_ORIGIN` environment variable to restrict access to specific domains.\n</create-file>\n</function_calls>'}