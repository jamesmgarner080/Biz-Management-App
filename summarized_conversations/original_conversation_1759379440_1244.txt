{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="DEPLOYMENT.md">\n# Deployment Guide\n\nThis guide covers deploying the Business Management Application to production environments.\n\n## Pre-Deployment Checklist\n\n- [ ] Change default admin password\n- [ ] Set secure JWT_SECRET in production\n- [ ] Configure production database (PostgreSQL recommended)\n- [ ] Set up HTTPS/SSL certificates\n- [ ] Configure CORS for production domain\n- [ ] Set up backup strategy\n- [ ] Configure logging\n- [ ] Set up monitoring\n\n## Environment Configuration\n\n### Production Environment Variables\n\nCreate a `.env` file with production settings:\n\n```env\n# Server Configuration\nPORT=3000\nNODE_ENV=production\n\n# JWT Configuration (CHANGE THIS!)\nJWT_SECRET=your-super-secure-random-string-min-32-characters\nJWT_EXPIRES_IN=24h\n\n# Database Configuration\nDATABASE_PATH=./database/business_management.db\n\n# File Upload Configuration\nUPLOAD_DIR=./uploads\nMAX_FILE_SIZE=5242880\n\n# CORS Configuration\nCORS_ORIGIN=https://yourdomain.com\n\n# Admin Credentials (CHANGE THIS!)\nDEFAULT_ADMIN_USERNAME=admin\nDEFAULT_ADMIN_PASSWORD=your-secure-password\n```\n\n## Deployment Options\n\n### Option 1: Traditional Server (VPS/Dedicated)\n\n#### Requirements\n- Ubuntu 20.04+ or similar Linux distribution\n- Node.js 18+\n- Nginx (for reverse proxy)\n- PM2 (for process management)\n\n#### Steps\n\n1. **Install Node.js**\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\n2. **Install PM2**\n```bash\nsudo npm install -g pm2\n```\n\n3. **Clone/Upload Application**\n```bash\ncd /var/www\n# Upload your application files here\ncd business-management-app\n```\n\n4. **Install Dependencies**\n```bash\nnpm install --production\n```\n\n5. **Configure Environment**\n```bash\ncp .env.example .env\nnano .env  # Edit with production values\n```\n\n6. **Initialize Database**\n```bash\nnpm run init-db\n```\n\n7. **Start with PM2**\n```bash\npm2 start backend/server.js --name business-management\npm2 save\npm2 startup  # Follow the instructions\n```\n\n8. **Configure Nginx**\n\nCreate `/etc/nginx/sites-available/business-management`:\n\n```nginx\nserver {\n    listen 80;\n    server_name yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \'upgrade\';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n```\n\nEnable the site:\n```bash\nsudo ln -s /etc/nginx/sites-available/business-management /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n9. **Set Up SSL with Let\'s Encrypt**\n```bash\nsudo apt-get install certbot python3-certbot-nginx\nsudo certbot --nginx -d yourdomain.com\n```\n\n### Option 2: Docker Deployment\n\n#### Dockerfile\n\nCreate a `Dockerfile`:\n\n```dockerfile\nFROM node:18-slim\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    poppler-utils \\\n    wkhtmltopdf \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create app directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm install --production\n\n# Copy application files\nCOPY . .\n\n# Create necessary directories\nRUN mkdir -p database uploads\n\n# Expose port\nEXPOSE 3000\n\n# Start application\nCMD ["npm", "start"]\n```\n\n#### docker-compose.yml\n\n```yaml\nversion: \'3.8\'\n\nservices:\n  app:\n    build: .\n    ports:\n      - "3000:3000"\n    environment:\n      - NODE_ENV=production\n      - PORT=3000\n      - JWT_SECRET=${JWT_SECRET}\n      - DATABASE_PATH=/app/data/business_management.db\n    volumes:\n      - ./data:/app/data\n      - ./uploads:/app/uploads\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - "80:80"\n      - "443:443"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - app\n    restart: unless-stopped\n```\n\n#### Deploy with Docker\n\n```bash\n# Build and start\ndocker-compose up -d\n\n# Initialize database\ndocker-compose exec app npm run init-db\n\n# View logs\ndocker-compose logs -f\n\n# Stop\ndocker-compose down\n```\n\n### Option 3: Cloud Platforms\n\n#### Heroku\n\n1. **Create Heroku App**\n```bash\nheroku create your-app-name\n```\n\n2. **Set Environment Variables**\n```bash\nheroku config:set JWT_SECRET=your-secret\nheroku config:set NODE_ENV=production\n```\n\n3. **Deploy**\n```bash\ngit push heroku main\n```\n\n4. **Initialize Database**\n```bash\nheroku run npm run init-db\n```\n\n#### AWS EC2\n\nFollow the Traditional Server deployment steps on an EC2 instance.\n\n#### DigitalOcean App Platform\n\n1. Connect your repository\n2. Configure environment variables\n3. Deploy automatically\n\n## Database Migration to PostgreSQL\n\nFor production, PostgreSQL is recommended over SQLite.\n\n### Install PostgreSQL\n\n```bash\nsudo apt-get install postgresql postgresql-contrib\n```\n\n### Update Dependencies\n\n```bash\nnpm install pg\n```\n\n### Modify database.js\n\nReplace SQLite with PostgreSQL connection:\n\n```javascript\nconst { Pool } = require(\'pg\');\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === \'production\' ? { rejectUnauthorized: false } : false\n});\n```\n\n### Update Schema\n\nConvert SQLite schema to PostgreSQL syntax (mainly AUTOINCREMENT â†’ SERIAL).\n\n## Backup Strategy\n\n### Automated Backups\n\nCreate a backup script `backup.sh`:\n\n```bash\n#!/bin/bash\nBACKUP_DIR="/var/backups/business-management"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Backup database\ncp database/business_management.db $BACKUP_DIR/db_$DATE.db\n\n# Backup uploads\ntar -czf $BACKUP_DIR/uploads_$DATE.tar.gz uploads/\n\n# Keep only last 30 days\nfind $BACKUP_DIR -type f -mtime +30 -delete\n\necho "Backup completed: $DATE"\n```\n\nAdd to crontab:\n```bash\ncrontab -e\n# Add: 0 2 * * * /path/to/backup.sh\n```\n\n## Monitoring\n\n### PM2 Monitoring\n\n```bash\npm2 monit\npm2 logs business-management\n```\n\n### Health Check Endpoint\n\nThe application includes a health check at `/api/health`:\n\n```bash\ncurl http://localhost:3000/api/health\n```\n\n### Log Management\n\nConfigure log rotation in `/etc/logrotate.d/business-management`:\n\n```\n/var/www/business-management-app/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 www-data www-data\n    sharedscripts\n}\n```\n\n## Security Hardening\n\n### 1. Firewall Configuration\n\n```bash\nsudo ufw allow 22/tcp\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n```\n\n### 2. Fail2Ban\n\n```bash\nsudo apt-get install fail2ban\nsudo systemctl enable fail2ban\n```\n\n### 3. Regular Updates\n\n```bash\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n### 4. Secure Headers\n\nAdd to Nginx configuration:\n\n```nginx\nadd_header X-Frame-Options "SAMEORIGIN" always;\nadd_header X-Content-Type-Options "nosniff" always;\nadd_header X-XSS-Protection "1; mode=block" always;\n```\n\n## Performance Optimization\n\n### 1. Enable Gzip Compression\n\nIn Nginx:\n```nginx\ngzip on;\ngzip_types text/plain text/css application/json application/javascript;\n```\n\n### 2. Static File Caching\n\n```nginx\nlocation ~* \\.(jpg|jpeg|png|gif|ico|css|js)$ {\n    expires 1y;\n    add_header Cache-Control "public, immutable";\n}\n```\n\n### 3. Database Optimization\n\nFor SQLite:\n```sql\nPRAGMA journal_mode = WAL;\nPRAGMA synchronous = NORMAL;\nPRAGMA cache_size = 10000;\n```\n\n## Troubleshooting\n\n### Application Won\'t Start\n\n1. Check logs: `pm2 logs business-management`\n2. Verify environment variables: `pm2 env 0`\n3. Check port availability: `sudo netstat -tulpn | grep 3000`\n\n### Database Errors\n\n1. Check file permissions: `ls -la database/`\n2. Verify database exists: `ls database/business_management.db`\n3. Reinitialize if needed: `npm run init-db`\n\n### Socket.io Connection Issues\n\n1. Verify WebSocket support in Nginx\n2. Check firewall rules\n3. Ensure CORS is properly configured\n\n## Maintenance\n\n### Update Application\n\n```bash\n# Backup first\n./backup.sh\n\n# Pull updates\ngit pull\n\n# Install dependencies\nnpm install --production\n\n# Restart\npm2 restart business-management\n```\n\n### Database Maintenance\n\n```bash\n# Vacuum database (SQLite)\nsqlite3 database/business_management.db "VACUUM;"\n\n# Check integrity\nsqlite3 database/business_management.db "PRAGMA integrity_check;"\n```\n\n## Scaling Considerations\n\n### Horizontal Scaling\n\nFor multiple instances:\n1. Use PostgreSQL instead of SQLite\n2. Implement Redis for session storage\n3. Use a load balancer (Nginx, HAProxy)\n4. Configure Socket.io with Redis adapter\n\n### Vertical Scaling\n\n- Increase server resources (CPU, RAM)\n- Optimize database queries\n- Implement caching strategies\n\n## Support\n\nFor deployment issues:\n- Check application logs\n- Review Nginx error logs: `/var/log/nginx/error.log`\n- Monitor system resources: `htop`\n- Check PM2 status: `pm2 status`\n\n## Rollback Procedure\n\nIf deployment fails:\n\n```bash\n# Stop application\npm2 stop business-management\n\n# Restore database backup\ncp /var/backups/business-management/db_YYYYMMDD.db database/business_management.db\n\n# Restore previous version\ngit checkout previous-version\n\n# Restart\npm2 restart business-management\n```\n</create-file>\n</function_calls>'}