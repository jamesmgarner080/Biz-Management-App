{'role': 'assistant', 'content': 'Now let\'s add permission management methods to the database class:\n\n<function_calls>\n<str-replace file_path="backend/database.js">\n<old_str>    // Statistics and reports\n    getTaskStatistics() {\n        return {\n            total: this.db.prepare(\'SELECT COUNT(*) as count FROM tasks\').get().count,\n            completed: this.db.prepare(\'SELECT COUNT(*) as count FROM tasks WHERE status = "completed"\').get().count,\n            pending: this.db.prepare(\'SELECT COUNT(*) as count FROM tasks WHERE status = "pending"\').get().count,\n            overdue: this.db.prepare(\'SELECT COUNT(*) as count FROM tasks WHERE status = "overdue"\').get().count,\n            byCategory: this.db.prepare(\'SELECT category, COUNT(*) as count FROM tasks GROUP BY category\').all(),\n            byPriority: this.db.prepare(\'SELECT priority, COUNT(*) as count FROM tasks GROUP BY priority\').all()\n        };\n    }\n    \n    close() {\n        this.db.close();\n    }\n}</old_str>\n<new_str>    // Statistics and reports\n    getTaskStatistics() {\n        return {\n            total: this.db.prepare(\'SELECT COUNT(*) as count FROM tasks\').get().count,\n            completed: this.db.prepare(\'SELECT COUNT(*) as count FROM tasks WHERE status = "completed"\').get().count,\n            pending: this.db.prepare(\'SELECT COUNT(*) as count FROM tasks WHERE status = "pending"\').get().count,\n            overdue: this.db.prepare(\'SELECT COUNT(*) as count FROM tasks WHERE status = "overdue"\').get().count,\n            byCategory: this.db.prepare(\'SELECT category, COUNT(*) as count FROM tasks GROUP BY category\').all(),\n            byPriority: this.db.prepare(\'SELECT priority, COUNT(*) as count FROM tasks GROUP BY priority\').all()\n        };\n    }\n    \n    // Permission management\n    getUserPermissions(userId) {\n        // Get role-based permissions\n        const user = this.getUserById(userId);\n        if (!user) return [];\n        \n        const rolePermissions = this.db.prepare(`\n            SELECT permission FROM role_permissions WHERE role = ?\n        `).all(user.role).map(p => p.permission);\n        \n        // Get user-specific permissions\n        const userPermissions = this.db.prepare(`\n            SELECT permission FROM user_permissions WHERE user_id = ?\n        `).all(userId).map(p => p.permission);\n        \n        // Combine and deduplicate\n        return [...new Set([...rolePermissions, ...userPermissions])];\n    }\n    \n    hasPermission(userId, permission) {\n        const permissions = this.getUserPermissions(userId);\n        return permissions.includes(permission);\n    }\n    \n    grantPermission(userId, permission, grantedBy) {\n        const stmt = this.db.prepare(`\n            INSERT OR IGNORE INTO user_permissions (user_id, permission, granted_by)\n            VALUES (?, ?, ?)\n        `);\n        return stmt.run(userId, permission, grantedBy);\n    }\n    \n    revokePermission(userId, permission) {\n        return this.db.prepare(`\n            DELETE FROM user_permissions WHERE user_id = ? AND permission = ?\n        `).run(userId, permission);\n    }\n    \n    getAllPermissions() {\n        return this.db.prepare(`\n            SELECT DISTINCT permission FROM role_permissions ORDER BY permission\n        `).all();\n    }\n    \n    getRolePermissions(role) {\n        return this.db.prepare(`\n            SELECT permission FROM role_permissions WHERE role = ?\n        `).all(role).map(p => p.permission);\n    }\n    \n    getUserCustomPermissions(userId) {\n        return this.db.prepare(`\n            SELECT up.*, u.full_name as granted_by_name\n            FROM user_permissions up\n            LEFT JOIN users u ON up.granted_by = u.id\n            WHERE up.user_id = ?\n        `).all(userId);\n    }\n    \n    close() {\n        this.db.close();\n    }\n}</new_str>\n</str-replace>\n</function_calls>'}