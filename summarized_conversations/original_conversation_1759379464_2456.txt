{'role': 'assistant', 'content': 'Now let\'s create a new permissions route:\n\n<function_calls>\n<create-file file_path="backend/routes/permissions.js">\nconst express = require(\'express\');\nconst { authenticateToken, requireAdmin } = require(\'../auth\');\n\nfunction createPermissionRoutes(db) {\n    const router = express.Router();\n    \n    // Get all available permissions\n    router.get(\'/available\', authenticateToken, requireAdmin, (req, res) => {\n        try {\n            const permissions = db.getAllPermissions();\n            res.json(permissions);\n        } catch (error) {\n            console.error(\'Get permissions error:\', error);\n            res.status(500).json({ error: \'Failed to get permissions\' });\n        }\n    });\n    \n    // Get user\'s permissions\n    router.get(\'/user/:userId\', authenticateToken, (req, res) => {\n        try {\n            const { userId } = req.params;\n            \n            // Users can only view their own permissions unless they\'re admin\n            if (req.user.role !== \'admin\' && parseInt(userId) !== req.user.id) {\n                return res.status(403).json({ error: \'Access denied\' });\n            }\n            \n            const permissions = db.getUserPermissions(userId);\n            const customPermissions = db.getUserCustomPermissions(userId);\n            \n            res.json({\n                permissions,\n                customPermissions\n            });\n        } catch (error) {\n            console.error(\'Get user permissions error:\', error);\n            res.status(500).json({ error: \'Failed to get user permissions\' });\n        }\n    });\n    \n    // Get role permissions\n    router.get(\'/role/:role\', authenticateToken, requireAdmin, (req, res) => {\n        try {\n            const { role } = req.params;\n            const permissions = db.getRolePermissions(role);\n            res.json(permissions);\n        } catch (error) {\n            console.error(\'Get role permissions error:\', error);\n            res.status(500).json({ error: \'Failed to get role permissions\' });\n        }\n    });\n    \n    // Grant permission to user\n    router.post(\'/grant\', authenticateToken, requireAdmin, (req, res) => {\n        try {\n            const { userId, permission } = req.body;\n            \n            if (!userId || !permission) {\n                return res.status(400).json({ error: \'Missing required fields\' });\n            }\n            \n            db.grantPermission(userId, permission, req.user.id);\n            \n            // Log action\n            db.logAction(req.user.id, \'grant_permission\', \'permission\', userId, \n                `Granted permission: ${permission}`, req.ip);\n            \n            res.json({ message: \'Permission granted successfully\' });\n        } catch (error) {\n            console.error(\'Grant permission error:\', error);\n            res.status(500).json({ error: \'Failed to grant permission\' });\n        }\n    });\n    \n    // Revoke permission from user\n    router.post(\'/revoke\', authenticateToken, requireAdmin, (req, res) => {\n        try {\n            const { userId, permission } = req.body;\n            \n            if (!userId || !permission) {\n                return res.status(400).json({ error: \'Missing required fields\' });\n            }\n            \n            db.revokePermission(userId, permission);\n            \n            // Log action\n            db.logAction(req.user.id, \'revoke_permission\', \'permission\', userId, \n                `Revoked permission: ${permission}`, req.ip);\n            \n            res.json({ message: \'Permission revoked successfully\' });\n        } catch (error) {\n            console.error(\'Revoke permission error:\', error);\n            res.status(500).json({ error: \'Failed to revoke permission\' });\n        }\n    });\n    \n    // Bulk grant permissions\n    router.post(\'/bulk-grant\', authenticateToken, requireAdmin, (req, res) => {\n        try {\n            const { userId, permissions } = req.body;\n            \n            if (!userId || !permissions || !Array.isArray(permissions)) {\n                return res.status(400).json({ error: \'Invalid request\' });\n            }\n            \n            permissions.forEach(permission => {\n                db.grantPermission(userId, permission, req.user.id);\n            });\n            \n            // Log action\n            db.logAction(req.user.id, \'bulk_grant_permissions\', \'permission\', userId, \n                `Granted ${permissions.length} permissions`, req.ip);\n            \n            res.json({ message: \'Permissions granted successfully\' });\n        } catch (error) {\n            console.error(\'Bulk grant permissions error:\', error);\n            res.status(500).json({ error: \'Failed to grant permissions\' });\n        }\n    });\n    \n    // Bulk revoke permissions\n    router.post(\'/bulk-revoke\', authenticateToken, requireAdmin, (req, res) => {\n        try {\n            const { userId, permissions } = req.body;\n            \n            if (!userId || !permissions || !Array.isArray(permissions)) {\n                return res.status(400).json({ error: \'Invalid request\' });\n            }\n            \n            permissions.forEach(permission => {\n                db.revokePermission(userId, permission);\n            });\n            \n            // Log action\n            db.logAction(req.user.id, \'bulk_revoke_permissions\', \'permission\', userId, \n                `Revoked ${permissions.length} permissions`, req.ip);\n            \n            res.json({ message: \'Permissions revoked successfully\' });\n        } catch (error) {\n            console.error(\'Bulk revoke permissions error:\', error);\n            res.status(500).json({ error: \'Failed to revoke permissions\' });\n        }\n    });\n    \n    return router;\n}\n\nmodule.exports = createPermissionRoutes;\n</create-file>\n</function_calls>'}