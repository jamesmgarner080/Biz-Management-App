{'role': 'assistant', 'content': 'Now let\'s add the new functions for user and permission management at the end of app.js:\n\n<function_calls>\n<str-replace file_path="frontend/js/app.js">\n<old_str>// Utility function to escape HTML\nfunction escapeHtml(text) {\n    if (!text) return \'\';\n    const div = document.createElement(\'div\');\n    div.textContent = text;\n    return div.innerHTML;\n}</old_str>\n<new_str>// User Management Functions\nfunction openUserModal(userId = null) {\n    const modal = document.getElementById(\'userModal\');\n    const modalTitle = document.getElementById(\'userModalTitle\');\n    const form = document.getElementById(\'userForm\');\n    const passwordGroup = document.getElementById(\'passwordGroup\');\n    \n    // Reset form\n    form.reset();\n    document.getElementById(\'userId\').value = \'\';\n    \n    if (userId) {\n        // Edit mode\n        modalTitle.textContent = \'Edit User\';\n        passwordGroup.style.display = \'none\';\n        document.getElementById(\'userPassword\').required = false;\n        \n        // Load user data\n        apiRequest(`/users/${userId}`).then(user => {\n            document.getElementById(\'userId\').value = user.id;\n            document.getElementById(\'userUsername\').value = user.username;\n            document.getElementById(\'userFullName\').value = user.full_name;\n            document.getElementById(\'userEmail\').value = user.email || \'\';\n            document.getElementById(\'userPhone\').value = user.phone || \'\';\n            document.getElementById(\'userRole\').value = user.role;\n        }).catch(error => {\n            console.error(\'Error loading user:\', error);\n            showToast(\'Failed to load user\', \'error\');\n        });\n    } else {\n        // Create mode\n        modalTitle.textContent = \'Create User\';\n        passwordGroup.style.display = \'block\';\n        document.getElementById(\'userPassword\').required = true;\n    }\n    \n    modal.classList.remove(\'hidden\');\n}\n\nfunction closeUserModal() {\n    document.getElementById(\'userModal\').classList.add(\'hidden\');\n}\n\nasync function saveUser() {\n    const form = document.getElementById(\'userForm\');\n    \n    if (!form.checkValidity()) {\n        form.reportValidity();\n        return;\n    }\n    \n    const userId = document.getElementById(\'userId\').value;\n    const userData = {\n        username: document.getElementById(\'userUsername\').value,\n        full_name: document.getElementById(\'userFullName\').value,\n        email: document.getElementById(\'userEmail\').value,\n        phone: document.getElementById(\'userPhone\').value,\n        role: document.getElementById(\'userRole\').value\n    };\n    \n    if (!userId) {\n        userData.password = document.getElementById(\'userPassword\').value;\n    }\n    \n    try {\n        const saveBtn = document.getElementById(\'saveUserBtn\');\n        saveBtn.disabled = true;\n        saveBtn.innerHTML = \'<i class="fas fa-spinner fa-spin"></i> Saving...\';\n        \n        if (userId) {\n            await apiRequest(`/users/${userId}`, {\n                method: \'PUT\',\n                body: JSON.stringify(userData)\n            });\n            showToast(\'User updated successfully\', \'success\');\n        } else {\n            await apiRequest(\'/users\', {\n                method: \'POST\',\n                body: JSON.stringify(userData)\n            });\n            showToast(\'User created successfully\', \'success\');\n        }\n        \n        closeUserModal();\n        loadUsers();\n    } catch (error) {\n        console.error(\'Error saving user:\', error);\n        showToast(error.message || \'Failed to save user\', \'error\');\n    } finally {\n        const saveBtn = document.getElementById(\'saveUserBtn\');\n        saveBtn.disabled = false;\n        saveBtn.innerHTML = \'<i class="fas fa-save"></i> Save User\';\n    }\n}\n\n// Permission Management Functions\nasync function loadPermissionsView() {\n    try {\n        // Load users for dropdown\n        const users = await apiRequest(\'/users\');\n        const select = document.getElementById(\'permissionUserId\');\n        select.innerHTML = \'<option value="">Select a user</option>\' +\n            users.map(user => `<option value="${user.id}">${escapeHtml(user.full_name)} (${user.role})</option>`).join(\'\');\n        \n        // Load available permissions\n        const permissions = await apiRequest(\'/permissions/available\');\n        window.availablePermissions = permissions;\n    } catch (error) {\n        console.error(\'Error loading permissions view:\', error);\n        showToast(\'Failed to load permissions\', \'error\');\n    }\n}\n\nasync function loadUserPermissions() {\n    const userId = document.getElementById(\'permissionUserId\').value;\n    \n    if (!userId) {\n        document.getElementById(\'permissionsContent\').style.display = \'none\';\n        return;\n    }\n    \n    try {\n        const data = await apiRequest(`/permissions/user/${userId}`);\n        const user = await apiRequest(`/users/${userId}`);\n        \n        // Show permissions content\n        document.getElementById(\'permissionsContent\').style.display = \'block\';\n        \n        // Get role permissions\n        const rolePermissions = await apiRequest(`/permissions/role/${user.role}`);\n        \n        // Render role permissions\n        const roleList = document.getElementById(\'rolePermissionsList\');\n        roleList.innerHTML = `\n            <p class="text-muted mb-2">These permissions are granted by the user\'s role: <strong>${getRoleDisplayName(user.role)}</strong></p>\n            <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">\n                ${rolePermissions.map(perm => `\n                    <span class="badge badge-info">${getPermissionDisplayName(perm)}</span>\n                `).join(\'\')}\n            </div>\n        `;\n        \n        // Render custom permissions\n        const customList = document.getElementById(\'customPermissionsList\');\n        if (data.customPermissions.length === 0) {\n            customList.innerHTML = \'<p class="text-muted">No custom permissions assigned</p>\';\n        } else {\n            customList.innerHTML = `\n                <div style="display: flex; flex-direction: column; gap: 0.5rem;">\n                    ${data.customPermissions.map(perm => `\n                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; background: var(--bg-secondary); border-radius: var(--radius-md);">\n                            <div>\n                                <strong>${getPermissionDisplayName(perm.permission)}</strong>\n                                <p class="text-muted" style="font-size: 0.875rem; margin: 0;">\n                                    Granted by ${escapeHtml(perm.granted_by_name)} on ${new Date(perm.granted_at).toLocaleDateString()}\n                                </p>\n                            </div>\n                            <button class="btn btn-danger btn-sm" onclick="revokePermission(${userId}, \'${perm.permission}\')">\n                                <i class="fas fa-times"></i>\n                                Revoke\n                            </button>\n                        </div>\n                    `).join(\'\')}\n                </div>\n            `;\n        }\n    } catch (error) {\n        console.error(\'Error loading user permissions:\', error);\n        showToast(\'Failed to load user permissions\', \'error\');\n    }\n}\n\nfunction openAddPermissionModal() {\n    const userId = document.getElementById(\'permissionUserId\').value;\n    \n    if (!userId) {\n        showToast(\'Please select a user first\', \'warning\');\n        return;\n    }\n    \n    // Populate permission dropdown\n    const select = document.getElementById(\'permissionSelect\');\n    select.innerHTML = \'<option value="">Select permission</option>\' +\n        window.availablePermissions.map(p => `<option value="${p.permission}">${getPermissionDisplayName(p.permission)}</option>`).join(\'\');\n    \n    document.getElementById(\'addPermissionModal\').classList.remove(\'hidden\');\n}\n\nfunction closeAddPermissionModal() {\n    document.getElementById(\'addPermissionModal\').classList.add(\'hidden\');\n}\n\nasync function savePermission() {\n    const userId = document.getElementById(\'permissionUserId\').value;\n    const permission = document.getElementById(\'permissionSelect\').value;\n    \n    if (!permission) {\n        showToast(\'Please select a permission\', \'warning\');\n        return;\n    }\n    \n    try {\n        await apiRequest(\'/permissions/grant\', {\n            method: \'POST\',\n            body: JSON.stringify({ userId: parseInt(userId), permission })\n        });\n        \n        showToast(\'Permission granted successfully\', \'success\');\n        closeAddPermissionModal();\n        loadUserPermissions();\n    } catch (error) {\n        console.error(\'Error granting permission:\', error);\n        showToast(error.message || \'Failed to grant permission\', \'error\');\n    }\n}\n\nasync function revokePermission(userId, permission) {\n    if (!confirm(`Are you sure you want to revoke this permission?`)) {\n        return;\n    }\n    \n    try {\n        await apiRequest(\'/permissions/revoke\', {\n            method: \'POST\',\n            body: JSON.stringify({ userId, permission })\n        });\n        \n        showToast(\'Permission revoked successfully\', \'success\');\n        loadUserPermissions();\n    } catch (error) {\n        console.error(\'Error revoking permission:\', error);\n        showToast(error.message || \'Failed to revoke permission\', \'error\');\n    }\n}\n\nfunction getRoleDisplayName(role) {\n    const roleNames = {\n        \'admin\': \'Administrator\',\n        \'manager\': \'Manager\',\n        \'supervisor\': \'Supervisor\',\n        \'bar_staff\': \'Bar Staff\',\n        \'cleaner\': \'Cleaner\',\n        \'employee\': \'Employee\'\n    };\n    return roleNames[role] || role;\n}\n\nfunction getPermissionDisplayName(permission) {\n    return permission.split(\'_\').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(\' \');\n}\n\n// Utility function to escape HTML\nfunction escapeHtml(text) {\n    if (!text) return \'\';\n    const div = document.createElement(\'div\');\n    div.textContent = text;\n    return div.innerHTML;\n}</new_str>\n</str-replace>\n</function_calls>'}