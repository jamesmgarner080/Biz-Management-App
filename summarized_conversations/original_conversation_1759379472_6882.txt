{'role': 'assistant', 'content': 'Now let\'s update the users route to support getting a single user:\n\n<function_calls>\n<str-replace file_path="backend/routes/users.js">\n<old_str>    // Get active users (for assignment dropdowns)\n    router.get(\'/active\', authenticateToken, (req, res) => {\n        try {\n            const users = db.getActiveUsers();\n            res.json(users);\n        } catch (error) {\n            console.error(\'Get active users error:\', error);\n            res.status(500).json({ error: \'Failed to get active users\' });\n        }\n    });</old_str>\n<new_str>    // Get user by ID\n    router.get(\'/:id\', authenticateToken, (req, res) => {\n        try {\n            const { id } = req.params;\n            \n            // Users can only view their own info unless they\'re management\n            if (![\'admin\', \'manager\'].includes(req.user.role) && parseInt(id) !== req.user.id) {\n                return res.status(403).json({ error: \'Access denied\' });\n            }\n            \n            const user = db.getUserById(id);\n            if (!user) {\n                return res.status(404).json({ error: \'User not found\' });\n            }\n            res.json(user);\n        } catch (error) {\n            console.error(\'Get user error:\', error);\n            res.status(500).json({ error: \'Failed to get user\' });\n        }\n    });\n    \n    // Get active users (for assignment dropdowns)\n    router.get(\'/active\', authenticateToken, (req, res) => {\n        try {\n            const users = db.getActiveUsers();\n            res.json(users);\n        } catch (error) {\n            console.error(\'Get active users error:\', error);\n            res.status(500).json({ error: \'Failed to get active users\' });\n        }\n    });</new_str>\n</str-replace>\n</function_calls>'}