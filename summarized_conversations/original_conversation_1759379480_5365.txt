{'role': 'assistant', 'content': 'Now let\'s add the summary report endpoint to the server:\n\n<function_calls>\n<str-replace file_path="backend/server.js">\n<old_str>// User report endpoint\napp.get(\'/api/reports/user/:userId\', authenticateToken, async (req, res) => {\n    try {\n        const { userId } = req.params;\n        \n        // Check permissions\n        if (req.user.role !== \'management\' && parseInt(userId) !== req.user.id) {\n            return res.status(403).json({ error: \'Access denied\' });\n        }\n        \n        const user = db.getUserById(userId);\n        if (!user) {\n            return res.status(404).json({ error: \'User not found\' });\n        }\n        \n        const tasks = db.getTasksByUser(userId);\n        const schedules = db.getShiftSchedulesByUser(userId, \n            new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0],\n            new Date().toISOString().split(\'T\')[0]\n        );\n        \n        const filename = `user-report-${userId}-${Date.now()}.pdf`;\n        const outputPath = path.join(uploadDir, filename);\n        \n        await pdfGenerator.generateUserReport(user, tasks, schedules, outputPath);\n        \n        res.json({\n            message: \'Report generated successfully\',\n            filename: filename,\n            path: `/uploads/${filename}`\n        });\n    } catch (error) {\n        console.error(\'User report generation error:\', error);\n        res.status(500).json({ error: \'Failed to generate report\' });\n    }\n});</old_str>\n<new_str>// User report endpoint\napp.get(\'/api/reports/user/:userId\', authenticateToken, async (req, res) => {\n    try {\n        const { userId } = req.params;\n        const { dateFrom, dateTo } = req.query;\n        \n        // Check permissions\n        if (![\'admin\', \'manager\'].includes(req.user.role) && parseInt(userId) !== req.user.id) {\n            return res.status(403).json({ error: \'Access denied\' });\n        }\n        \n        const user = db.getUserById(userId);\n        if (!user) {\n            return res.status(404).json({ error: \'User not found\' });\n        }\n        \n        const startDate = dateFrom || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split(\'T\')[0];\n        const endDate = dateTo || new Date().toISOString().split(\'T\')[0];\n        \n        const tasks = db.getTasksByUser(userId);\n        const schedules = db.getShiftSchedulesByUser(userId, startDate, endDate);\n        \n        const filename = `user-report-${userId}-${Date.now()}.pdf`;\n        const outputPath = path.join(uploadDir, filename);\n        \n        await pdfGenerator.generateUserReport(user, tasks, schedules, outputPath);\n        \n        res.json({\n            message: \'Report generated successfully\',\n            filename: filename,\n            path: `/uploads/${filename}`\n        });\n    } catch (error) {\n        console.error(\'User report generation error:\', error);\n        res.status(500).json({ error: \'Failed to generate report\' });\n    }\n});\n\n// Summary report endpoint\napp.post(\'/api/reports/summary\', authenticateToken, async (req, res) => {\n    try {\n        if (![\'admin\', \'manager\'].includes(req.user.role)) {\n            return res.status(403).json({ error: \'Management access required\' });\n        }\n        \n        const { dateFrom, dateTo, includeUserStats, includeCategoryBreakdown } = req.body;\n        \n        let tasks = db.getAllTasks();\n        \n        // Apply date filters\n        if (dateFrom) {\n            tasks = tasks.filter(t => t.due_date >= dateFrom);\n        }\n        if (dateTo) {\n            tasks = tasks.filter(t => t.due_date <= dateTo);\n        }\n        \n        const filename = `summary-report-${Date.now()}.pdf`;\n        const outputPath = path.join(uploadDir, filename);\n        \n        await pdfGenerator.generateSummaryReport(\n            tasks, \n            db.getAllUsers(), \n            { dateFrom, dateTo, includeUserStats, includeCategoryBreakdown },\n            outputPath\n        );\n        \n        res.json({\n            message: \'Report generated successfully\',\n            filename: filename,\n            path: `/uploads/${filename}`\n        });\n    } catch (error) {\n        console.error(\'Summary report generation error:\', error);\n        res.status(500).json({ error: \'Failed to generate report\' });\n    }\n});</new_str>\n</str-replace>\n</function_calls>'}