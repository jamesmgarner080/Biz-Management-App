{'role': 'assistant', 'content': 'Now let\'s add the report functions at the end of app.js:\n\n<function_calls>\n<str-replace file_path="frontend/js/app.js">\n<old_str>function getPermissionDisplayName(permission) {\n    return permission.split(\'_\').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(\' \');\n}\n\n// Utility function to escape HTML\nfunction escapeHtml(text) {\n    if (!text) return \'\';\n    const div = document.createElement(\'div\');\n    div.textContent = text;\n    return div.innerHTML;\n}</old_str>\n<new_str>function getPermissionDisplayName(permission) {\n    return permission.split(\'_\').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(\' \');\n}\n\n// Report Management Functions\nasync function loadReportsView() {\n    try {\n        // Load users for dropdowns\n        const users = await apiRequest(\'/users\');\n        \n        // Populate user dropdowns\n        const reportAssignedTo = document.getElementById(\'reportAssignedTo\');\n        const reportUserId = document.getElementById(\'reportUserId\');\n        \n        if (reportAssignedTo) {\n            reportAssignedTo.innerHTML = \'<option value="">All</option>\' +\n                users.map(user => `<option value="${user.id}">${escapeHtml(user.full_name)}</option>`).join(\'\');\n        }\n        \n        if (reportUserId) {\n            reportUserId.innerHTML = \'<option value="">Select a user</option>\' +\n                users.map(user => `<option value="${user.id}">${escapeHtml(user.full_name)}</option>`).join(\'\');\n        }\n    } catch (error) {\n        console.error(\'Error loading reports view:\', error);\n    }\n}\n\nfunction handleReportTypeChange() {\n    const reportType = document.getElementById(\'reportType\').value;\n    \n    // Hide all options\n    document.getElementById(\'taskReportOptions\').style.display = \'none\';\n    document.getElementById(\'userReportOptions\').style.display = \'none\';\n    document.getElementById(\'summaryReportOptions\').style.display = \'none\';\n    \n    // Show relevant options\n    if (reportType === \'tasks\') {\n        document.getElementById(\'taskReportOptions\').style.display = \'block\';\n    } else if (reportType === \'user\') {\n        document.getElementById(\'userReportOptions\').style.display = \'block\';\n        document.getElementById(\'reportUserId\').required = true;\n    } else if (reportType === \'summary\') {\n        document.getElementById(\'summaryReportOptions\').style.display = \'block\';\n    }\n}\n\nasync function generateReport(e) {\n    e.preventDefault();\n    \n    const reportType = document.getElementById(\'reportType\').value;\n    \n    if (!reportType) {\n        showToast(\'Please select a report type\', \'warning\');\n        return;\n    }\n    \n    try {\n        showToast(\'Generating report...\', \'info\');\n        \n        if (reportType === \'tasks\') {\n            await generateTaskReport();\n        } else if (reportType === \'user\') {\n            await generateUserReport();\n        } else if (reportType === \'summary\') {\n            await generateSummaryReport();\n        }\n    } catch (error) {\n        console.error(\'Error generating report:\', error);\n        showToast(\'Failed to generate report\', \'error\');\n    }\n}\n\nasync function generateTaskReport() {\n    const filters = {\n        status: document.getElementById(\'reportStatus\').value,\n        priority: document.getElementById(\'reportPriority\').value,\n        category: document.getElementById(\'reportCategory\').value,\n        assignedTo: document.getElementById(\'reportAssignedTo\').value,\n        dateFrom: document.getElementById(\'reportDateFrom\').value,\n        dateTo: document.getElementById(\'reportDateTo\').value\n    };\n    \n    // Remove empty filters\n    Object.keys(filters).forEach(key => {\n        if (!filters[key]) delete filters[key];\n    });\n    \n    const response = await fetch(`${API_URL}/reports/tasks`, {\n        method: \'POST\',\n        headers: {\n            \'Content-Type\': \'application/json\',\n            \'Authorization\': `Bearer ${getAuthToken()}`\n        },\n        body: JSON.stringify({ filters })\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok) {\n        window.open(data.path, \'_blank\');\n        showToast(\'Report generated successfully\', \'success\');\n    } else {\n        throw new Error(data.error);\n    }\n}\n\nasync function generateUserReport() {\n    const userId = document.getElementById(\'reportUserId\').value;\n    \n    if (!userId) {\n        showToast(\'Please select a user\', \'warning\');\n        return;\n    }\n    \n    const dateFrom = document.getElementById(\'userReportDateFrom\').value;\n    const dateTo = document.getElementById(\'userReportDateTo\').value;\n    \n    let url = `${API_URL}/reports/user/${userId}`;\n    if (dateFrom || dateTo) {\n        const params = new URLSearchParams();\n        if (dateFrom) params.append(\'dateFrom\', dateFrom);\n        if (dateTo) params.append(\'dateTo\', dateTo);\n        url += \'?\' + params.toString();\n    }\n    \n    const response = await fetch(url, {\n        method: \'GET\',\n        headers: {\n            \'Authorization\': `Bearer ${getAuthToken()}`\n        }\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok) {\n        window.open(data.path, \'_blank\');\n        showToast(\'Report generated successfully\', \'success\');\n    } else {\n        throw new Error(data.error);\n    }\n}\n\nasync function generateSummaryReport() {\n    const filters = {\n        dateFrom: document.getElementById(\'summaryReportDateFrom\').value,\n        dateTo: document.getElementById(\'summaryReportDateTo\').value,\n        includeUserStats: document.getElementById(\'includeUserStats\').checked,\n        includeCategoryBreakdown: document.getElementById(\'includeCategoryBreakdown\').checked\n    };\n    \n    const response = await fetch(`${API_URL}/reports/summary`, {\n        method: \'POST\',\n        headers: {\n            \'Content-Type\': \'application/json\',\n            \'Authorization\': `Bearer ${getAuthToken()}`\n        },\n        body: JSON.stringify(filters)\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok) {\n        window.open(data.path, \'_blank\');\n        showToast(\'Report generated successfully\', \'success\');\n    } else {\n        throw new Error(data.error);\n    }\n}\n\n// Utility function to escape HTML\nfunction escapeHtml(text) {\n    if (!text) return \'\';\n    const div = document.createElement(\'div\');\n    div.textContent = text;\n    return div.innerHTML;\n}</new_str>\n</str-replace>\n</function_calls>'}