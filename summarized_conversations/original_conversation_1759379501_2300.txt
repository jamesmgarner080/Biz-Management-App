{'role': 'assistant', 'content': '<function_calls>\n<str-replace file_path="frontend/js/app.js">\n<old_str>async function saveUser() {\n    const form = document.getElementById(\'userForm\');\n    \n    if (!form.checkValidity()) {\n        form.reportValidity();\n        return;\n    }\n    \n    const userId = document.getElementById(\'userId\').value;\n    const userData = {\n        username: document.getElementById(\'userUsername\').value,\n        full_name: document.getElementById(\'userFullName\').value,\n        email: document.getElementById(\'userEmail\').value,\n        phone: document.getElementById(\'userPhone\').value,\n        role: document.getElementById(\'userRole\').value\n    };\n    \n    if (!userId) {\n        userData.password = document.getElementById(\'userPassword\').value;\n    }\n    \n    try {\n        const saveBtn = document.getElementById(\'saveUserBtn\');\n        saveBtn.disabled = true;\n        saveBtn.innerHTML = \'<i class="fas fa-spinner fa-spin"></i> Saving...\';\n        \n        if (userId) {\n            await apiRequest(`/users/${userId}`, {\n                method: \'PUT\',\n                body: JSON.stringify(userData)\n            });\n            showToast(\'User updated successfully\', \'success\');\n        } else {\n            await apiRequest(\'/users\', {\n                method: \'POST\',\n                body: JSON.stringify(userData)\n            });\n            showToast(\'User created successfully\', \'success\');\n        }\n        \n        closeUserModal();\n        loadUsers();\n    } catch (error) {\n        console.error(\'Error saving user:\', error);\n        showToast(error.message || \'Failed to save user\', \'error\');\n    } finally {\n        const saveBtn = document.getElementById(\'saveUserBtn\');\n        saveBtn.disabled = false;\n        saveBtn.innerHTML = \'<i class="fas fa-save"></i> Save User\';\n    }\n}</old_str>\n<new_str>async function saveUser() {\n    const form = document.getElementById(\'userForm\');\n    \n    if (!form.checkValidity()) {\n        form.reportValidity();\n        return;\n    }\n    \n    const userId = document.getElementById(\'userId\').value;\n    const userData = {\n        username: document.getElementById(\'userUsername\').value,\n        full_name: document.getElementById(\'userFullName\').value,\n        email: document.getElementById(\'userEmail\').value,\n        phone: document.getElementById(\'userPhone\').value,\n        role: document.getElementById(\'userRole\').value\n    };\n    \n    if (!userId) {\n        userData.password = document.getElementById(\'userPassword\').value;\n    }\n    \n    // Get selected custom permissions (admin only)\n    const selectedPermissions = [];\n    if (currentUser.role === \'admin\') {\n        document.querySelectorAll(\'.permission-checkbox:checked\').forEach(checkbox => {\n            selectedPermissions.push(checkbox.value);\n        });\n    }\n    \n    try {\n        const saveBtn = document.getElementById(\'saveUserBtn\');\n        saveBtn.disabled = true;\n        saveBtn.innerHTML = \'<i class="fas fa-spinner fa-spin"></i> Saving...\';\n        \n        let newUserId = userId;\n        \n        if (userId) {\n            // Update existing user\n            await apiRequest(`/users/${userId}`, {\n                method: \'PUT\',\n                body: JSON.stringify(userData)\n            });\n            \n            // Update permissions if admin\n            if (currentUser.role === \'admin\') {\n                // Get current custom permissions\n                const permData = await apiRequest(`/permissions/user/${userId}`);\n                const currentCustomPerms = permData.customPermissions.map(p => p.permission);\n                \n                // Revoke permissions that were unchecked\n                const toRevoke = currentCustomPerms.filter(p => !selectedPermissions.includes(p));\n                for (const perm of toRevoke) {\n                    await apiRequest(\'/permissions/revoke\', {\n                        method: \'POST\',\n                        body: JSON.stringify({ userId: parseInt(userId), permission: perm })\n                    });\n                }\n                \n                // Grant new permissions\n                const toGrant = selectedPermissions.filter(p => !currentCustomPerms.includes(p));\n                for (const perm of toGrant) {\n                    await apiRequest(\'/permissions/grant\', {\n                        method: \'POST\',\n                        body: JSON.stringify({ userId: parseInt(userId), permission: perm })\n                    });\n                }\n            }\n            \n            showToast(\'User updated successfully\', \'success\');\n        } else {\n            // Create new user\n            const result = await apiRequest(\'/users\', {\n                method: \'POST\',\n                body: JSON.stringify(userData)\n            });\n            \n            newUserId = result.userId;\n            \n            // Grant custom permissions if admin and permissions selected\n            if (currentUser.role === \'admin\' && selectedPermissions.length > 0) {\n                await apiRequest(\'/permissions/bulk-grant\', {\n                    method: \'POST\',\n                    body: JSON.stringify({ \n                        userId: newUserId, \n                        permissions: selectedPermissions \n                    })\n                });\n            }\n            \n            showToast(\'User created successfully\', \'success\');\n        }\n        \n        closeUserModal();\n        loadUsers();\n    } catch (error) {\n        console.error(\'Error saving user:\', error);\n        showToast(error.message || \'Failed to save user\', \'error\');\n    } finally {\n        const saveBtn = document.getElementById(\'saveUserBtn\');\n        saveBtn.disabled = false;\n        saveBtn.innerHTML = \'<i class="fas fa-save"></i> Save User\';\n    }\n}</new_str>\n</str-replace>\n</function_calls>'}